class::Thread
summary::The context of code evaluation
categories::Core>Kernel
related:: Classes/Routine

description::

A Thread represents the context within which code runs. It has:
list::
## An associated link::#-clock#clock::
## Associated logical time (link::#-beats#beats:: and link::#-seconds#seconds::)
## Own link::#-randSeed#random number seed::
## Own link::#-exceptionHandler#exception handler::
::

There is always one strong::main thread:: belonging to the link::Classes/Process##process::.
Code evaluated in code editor, on command line, scheduled on clocks, or evaluated in
response to incoming OSC and MIDI messages runs within the main thread. A strong::new thread::
 is created by instantiating the Thread's subclass link::Classes/Routine:: which will run a
link::Classes/Function:: in the context of its own thread (there is no use in instantiating
the Thread itself).

Threads are in strong::hierarchical:: relationships - as parents and children: when code on
a thread starts or resumes another thread, the former thread becomes the latter's
link::#-parent#parent::. Some aspects of threads are inherited by their children.


method:: thisThread
The global pseudo-variable code::thisThread:: always returns the enclosing thread running
the current code.

code::
// example
thisThread.beats;
thisThread.seconds;
thisThread.clock;
::

classMethods::

method::new

Create a Thread.

note:: You will not typically do this yourself but as a result of creating Routines, for example.::

code::
g = Thread({"hello".postln;});
g.seconds; //time of creation, cannot advance without a clock
::

argument::func
A function with code for the thread to run.

argument::stackSize
defaults to 64 depth call stack.

instanceMethods::

method:: parent
The parent thread that started or resumed this thread.

discussion::

Threads are in hierarchical relationships - as parents and children: when code
on a thread starts or resumes another thread (Routine), the former thread becomes
the latter's parent.

Some aspects of threads are inherited by their children:
list::
## associated link::#-clock#clock::
## associated link::#-beats#logical time::
::


method::beats
Get or set the current logical time of the thread in beats. This will be the same
as the time in seconds, unless this thread's link::#-clock#clock:: is
link::Classes/TempoClock::, and the clock's link::Classes/TempoClock#-tempo#tempo::
 is other than code::1::. Setting code::beats:: also sets link::#-seconds:: to
code:: thisThread.clock.beats2secs(beats) ::.

discussion::

There are several sources of logical time:
list::
## When code is run from the code editor, the command line, or in response to OSC
and MIDI messages, the current thread's logical time is set to the current
strong::real time:: (see link::Classes/Process#*elapsedTime::).

## When code strong::scheduled:: on a clock is run, the clock sets the logical time
of the current thread to the time the code was scheduled for.

## Child threads strong::inherit:: logical time from their link::#-parent#parents::
 - whenever a thread (Routine) is started or resumed, its logical time is set to
that of the parent thread.
::

However, a thread's logical time may also be set strong::manually:: (using this
method or link::#-seconds::). It may be useful to change the strong::current:: thread's
time in order to manipulate behavior of streams that use the current logical time for
their operation (e.g. streams created by link::Classes/Pstep:: and
link::Classes/Pseg:: patterns). This will affect all code running within the current
thread, as well as any child threads, due to logical time inheritance. Note however
that changing strong::another:: thread's time will have no effect, because the time
will be overridden by inheritance as soon as the thread is run; likewise, any changes
to the current thread's time only have effect until the thread is suspended
(it link::Classes/Object#-yield#yields::) and resumed again.


method::seconds
Get or set the current logical time of the thread in seconds. Setting code::seconds::
 also sets link::#-beats:: to code::thisThread.clock.secs2beats(seconds)::.

See link::#-beats:: for discussion on logical time.

method::clock
Get or set the thread's associated link::Classes/Clock::.

discussion::

There are several ways a clock becomes associated with a thread:
list::
## When code is run from the code editor, the command line, or in response to OSC and
MIDI messages, the current thread's clock is set to link::Classes/SystemClock::.

## When code strong::scheduled:: on a clock is run, that clock becomes the current
thread's clock.

## Child threads strong::inherit:: the associated clock from their
link::#-parent#parents::.
::

A thread's clock may also be manually set using this method. Setting the
strong::current:: thread's clock is useful to manipulate further behavior of the
thread or its child threads, but the clock will be reset the next time the thread
is resumed, due to clock inheritance. For the same reason, setting
strong::another:: thread's clock will have no effect on code running on it.

method::isPlaying
Returns:: true if it is playing.

method::state

The internal state values for a Thread instance can be polled:
table::
## 0 || not started
## 7 || running
## 8 || stopped
::

subsection::Seeding the random number generator

see also: link::Reference/randomSeed::

method::randSeed
Set the random number generator seed using a single integer.
discussion::
Example:
code::
g = thisThread.randSeed = 4;
10.do{1.0.rand2.postln};
::

method::randData

Get or set the three integer array which defines the internal basis for the random number generator.  You can use this to get back the exact same random number sequence, and it provides a mechanism for automatic replay for generative music.
discussion::
Example:
code::
g = thisThread.randData;
10.do{1.0.rand2.postln};
::
code::
// each time the seed is reset, the random number generation should give the same sequence
thisThread.randData_(Int32Array[ -662787342, 1546785953, 1661466823 ]);
10.do{1.0.rand2.postln};
::

