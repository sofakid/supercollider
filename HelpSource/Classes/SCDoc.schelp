class:: SCDoc
summary:: Help system main class
categories:: HelpSystem
related:: Classes/SCDocParser, Classes/SCDocRenderer, Guides/WritingHelp, Reference/SCDocSyntax

DESCRIPTION::
SCDoc manages the SuperCollider documentation system.

It uses link::Classes/SCDocParser:: for parsing and link::Classes/SCDocRenderer:: for rendering.

The syntax reference for the documentation markup language can be found here: link::Reference/SCDocSyntax::.

A guide to writing help can be found here: link::Guides/WritingHelp::.

SUBSECTION:: Basic usage
Get help URL for a specific string:
code::
url = SCDoc.prepareHelpForURL(SCDoc.findHelpFile("SinOsc"));
::

CLASSMETHODS::
private:: initClass, addToDocMap, makeMethodList, updateFile, makeOverviews, postProgress, docMapToJSON, handleUndocumentedClasses, writeDocMap, collectAllMethods, tickProgress, makeProgressWindow, readDocMap, helpBaseDir, initHelpTargetDir, addMethodList, findHelpSourceDirs, waitForHelp, getAllMetaData, syncNonHelpFiles, makeClassTemplate

method:: p
The default link::Classes/SCDocParser:: object, created automatically.
method:: r
The default link::Classes/SCDocRenderer:: object, created automatically. Defaults to an instance of link::Classes/SCDocHTMLRenderer::

method:: helpSourceDir
get/set the system-wide directory of help sourcefiles. Defaults to code:: thisProcess.platform.classLibraryDir.dirname +/+ "HelpSource" ::

method:: helpSourceDirs
get the list of HelpSource folders, including extensions and quarks.
discussion::
This searches recursively for all folders named "HelpSource" under code::thisProcess.platform.userExtensionDir:: and code::thisProcess.platform.systemExtensionDir:: as well as including the system-wide code::helpSourceDir::

method:: helpTargetDir
get/set the user help target directory. Defaults to code:: thisProcess.platform.userAppSupportDir +/+ "Help" ::

subsection:: Main interface

method:: prepareHelpForURL
Prepare help for the given URL by checking if the file needs rendering from schelp source, or some other action needs to be done.
Use this as a wrapper to get on-the-fly rendering and processing of help files.
argument:: url
The url to prepare. If this is not a local file inside link::#*helpTargetDir:: then it will just pass through the url directly.
argument:: doYield
If true, do some code::0.wait:: while running. Useful when used in Routines.
returns:: the URL or nil if file not found.

method:: findHelpFile
Find help for a given string. This method redirects to the instance method code::findHelpFile:: on the current renderer object.
returns:: the URL for help on given string

subsection:: Render all files

method:: updateAll
Render all help-files that need updating and generate overviews and cached metadata index. This can take several minutes. Useful mainly if you want to render all help to put online or similar.
argument:: force
Force updating of all files.
argument:: doneFunc
Function to evaluate when done.
argument:: threaded
When true, runs the process in a link::Classes/Routine:: on link::Classes/AppClock::. This is needed to get progress feedback when running inside a frontend like the SuperCollider app on OSX. If running with the sclang terminal client, this can be set to false for better performance.
argument:: gui
If true and code::threaded:: is also true, create a GUI progress window instead of posting progress to the post window.
discussion::
It traverses the directory tree recursively starting at code::helpSourceDir::, parsing and rendering all *.schelp files and copying all other files. The output goes to an equal directory layout in code::helpTargetDir::.
argument:: findExtensions
If false, don't search for extensions (useful when building base help)
argument:: useHelpBase
if false, don't initialize help target directory from existing HelpBase

subsection:: Cached map of documents
SCDoc keeps a dictionary where each document is represented by an link::Classes/Event:: with the keys code::path, title, categories, summary, installed::.

The link::#*updateAll:: method also writes the document map in JSON format to code::helpTargetDir/docmap.js:: and a list of all methods and their implementing classes to code::helpTargetDir/methods.js::

method:: docMap
Returns the internal dictionary of documents.
returns:: An internal link::Classes/Dictionary::, it will be empty if there was no docmap cache file.
discussion::
If the document map cache was not already read from file, it's first read from file if existent.
The returned Dictionary is indexed by the documents path relative helpSourceDir, and without file suffix. Like code::Classes/SCDoc::.

This dictionary is cached in code::helpTargetDir/scdoc_cache::.
 
method:: makeCategoryMap
Creates a dictionary of all categories, with a list of documents for each category.
returns:: A link::Classes/Dictionary:: of all documents grouped by category.
discussion:: The keys are category symbols, and each value is a link::Classes/List:: of Events representing each document.

subsection:: Utilities

method:: splitList
Split a comma-separated string into an array of whitespace-stripped strings, useful to parse the contents of tags like code::categories\:::: and code::related\::::.
argument:: txt
The string to split.
returns:: An link::Classes/Array:: of whitespace-stripped strings.

method:: makeArgString
Returns:: A link::Classes/String:: representing the arguments (with defaults) for a link::Classes/Method::.

method:: classHasArKrIr
argument:: c
The link::Classes/Class:: to check.
Returns:: code::true:: if the class responds to ar, kr or ir classmethods.

