#line 2 "lex.scdoc.cpp"

#line 4 "lex.scdoc.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer scdoc_create_buffer
#define yy_delete_buffer scdoc_delete_buffer
#define yy_flex_debug scdoc_flex_debug
#define yy_init_buffer scdoc_init_buffer
#define yy_flush_buffer scdoc_flush_buffer
#define yy_load_buffer_state scdoc_load_buffer_state
#define yy_switch_to_buffer scdoc_switch_to_buffer
#define yyin scdocin
#define yyleng scdocleng
#define yylex scdoclex
#define yylineno scdoclineno
#define yyout scdocout
#define yyrestart scdocrestart
#define yytext scdoctext
#define yywrap scdocwrap
#define yyalloc scdocalloc
#define yyrealloc scdocrealloc
#define yyfree scdocfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE scdocrestart(scdocin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int scdocleng;

extern FILE *scdocin, *scdocout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE scdoclex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-scdoclineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < scdocleng; ++yyl )\
                    if ( scdoctext[yyl] == '\n' )\
                        --scdoclineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scdoctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up scdoctext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via scdocrestart()), so that the user can continue scanning by
	 * just pointing scdocin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when scdoctext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int scdocleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow scdocwrap()'s to do buffer switches
 * instead of setting up a fresh scdocin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void scdocrestart (FILE *input_file  );
void scdoc_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE scdoc_create_buffer (FILE *file,int size  );
void scdoc_delete_buffer (YY_BUFFER_STATE b  );
void scdoc_flush_buffer (YY_BUFFER_STATE b  );
void scdocpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void scdocpop_buffer_state (void );

static void scdocensure_buffer_stack (void );
static void scdoc_load_buffer_state (void );
static void scdoc_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER scdoc_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE scdoc_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE scdoc_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE scdoc_scan_bytes (yyconst char *bytes,int len  );

void *scdocalloc (yy_size_t  );
void *scdocrealloc (void *,yy_size_t  );
void scdocfree (void *  );

#define yy_new_buffer scdoc_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        scdocensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scdoc_create_buffer(scdocin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        scdocensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            scdoc_create_buffer(scdocin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define scdocwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *scdocin = (FILE *) 0, *scdocout = (FILE *) 0;

typedef int yy_state_type;

extern int scdoclineno;

int scdoclineno = 1;

extern char *scdoctext;
#define yytext_ptr scdoctext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up scdoctext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	scdocleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 105
#define YY_END_OF_BUFFER 106
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1254] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  106,   65,   54,   47,
       55,   63,   65,   49,   66,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   66,   65,   64,   53,   46,   66,   63,   66,   53,
       45,   55,   66,   88,   88,   84,   55,   85,   87,   89,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,  104,  104,   55,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,   55,  104,  104,
       61,   59,   60,   55,   57,   61,   49,   57,   54,    0,

        0,   49,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       48,   63,   44,   49,   41,    0,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,    0,    0,    0,   43,
       64,   46,   63,    0,    0,   88,   88,   85,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   85,   87,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  102,    0,
        0,   59,   59,   57,    0,   57,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       44,    0,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   51,   52,   50,

       43,   42,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  103,   58,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       56,   62,   62,   62,   62,    0,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,    0,    0,    0,   62,
        0,   62,   62,   62,   62,   62,   62,    0,   62,   62,
       62,   62,   62,   62,    0,   62,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   86,   86,   86,   86,   86,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   62,   62,   62,    0,   62,   62,   35,   62,
       62,   62,   62,   62,   62,   62,    0,   62,   62,   29,
       21,   37,   62,   28,   62,   62,   62,   62,   62,   62,
       32,   62,   62,   62,    0,   62,    0,   22,   62,   88,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   86,    0,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

        0,    0,    0,    0,    0,    0,    0,    0,   96,    0,
        0,    0,    0,    0,    0,    0,   90,   98,    0,    0,
        0,    0,    0,   93,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   62,   62,    1,
       62,   62,   35,   38,   62,   62,   62,   62,   62,   62,
       62,   31,   62,   62,   29,   21,   37,   40,    0,   28,
       62,   62,   62,   62,   62,   62,   32,    0,   62,   62,
       25,   62,    2,   22,   62,   88,   88,   88,   88,   88,

       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       86,   67,   86,   86,   86,   86,   86,   86,   86,    0,
       86,   86,   86,   86,   86,   86,   68,    0,    0,    0,
        0,    0,    0,    0,   96,   99,    0,    0,    0,    0,
       92,    0,    0,   90,   98,  101,    0,    0,    0,    0,
       93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       30,   62,   62,    1,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   31,   62,    0,   13,   62,    0,   62,

        0,    0,    0,   33,   62,    0,   25,   62,    2,    0,
       88,   88,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,   88,   88,   86,   67,   86,   86,   86,   86,
       86,   86,    0,   79,    0,   86,    0,    0,   86,    0,
       68,    0,    0,    0,   91,    0,    0,    0,    0,    0,
        0,    0,   92,    0,    0,   94,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       30,    0,   62,   62,   62,   62,   62,   62,   62,    0,
        0,    0,   62,    8,   13,   62,    9,    0,    4,   19,

       10,   33,   62,    3,    0,   27,   88,   88,   88,   88,
       88,   88,   88,   88,   88,   86,   86,   86,   86,   86,
        0,   86,   74,   79,   75,    0,   70,   76,   86,   69,
        0,   91,    0,    0,    0,    0,    0,    0,    0,   94,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   14,   62,   62,
        0,   62,   62,   62,   62,   34,   18,   26,   62,    8,
       62,    9,    6,    4,   19,   10,   62,    3,   36,   27,
       88,   88,   88,   88,   88,   88,   88,   86,   86,    0,
       86,   86,   83,   86,   74,   75,   72,   70,   76,   86,

       69,    0,    0,    0,    0,    0,   95,    0,    0,   97,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   14,    0,   62,    7,    0,   62,   62,    0,   34,
       18,   26,   62,   62,    6,    0,   36,   39,   88,   88,
       88,   88,   88,   88,    0,   86,   73,    0,   86,   83,
       86,   72,    0,    0,    0,    0,   95,    0,   97,  100,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        5,   62,    7,   12,   62,    0,   20,   62,   62,   11,
       88,   88,   88,   71,   86,   73,   78,    0,   86,   77,
        0,    0,    0,    0,    0,    0,    0,    0,    5,    0,

       12,   62,   15,   20,   62,    0,   11,   88,   88,   71,
        0,   78,   80,   86,   77,    0,    0,    0,    0,    0,
       16,   62,   15,   62,   23,   88,   81,   80,   86,    0,
        0,    0,   16,    0,   62,   23,   88,   81,   86,    0,
        0,    0,   24,    0,   88,    0,    0,   24,   17,   82,
       17,   82,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,    9,    7,   10,
       11,    9,    9,   12,    9,    7,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    9,
        9,    9,    6,    9,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       25,   32,   33,   34,   35,   36,   37,   38,   39,   25,
        7,   40,    7,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   51,   58,   59,   60,   61,   62,   63,   64,
       65,   51,    7,   66,    7,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[67] =
    {   0,
        1,    2,    3,    3,    2,    1,    1,    1,    1,    4,
        4,    5,    1,    6,    7,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    9,
        6,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    1
    } ;

static yyconst flex_int16_t yy_base[1262] =
    {   0,
        0,    0,   65,  104,  143,  182,  222,    0,  288,    0,
      353,    0,   79,   83,  413,    0, 3954, 3955,  478,   87,
      118,   89, 3945,   72, 3937,   97, 3936,  109,  117,  102,
       86,  144,   58,  119,  159,  146,  145,  175,  519,  346,
      348,  476, 3884,    0,  514,  543,  557,  202, 3934, 3955,
      566, 3955, 3955,    0,  580, 3955, 3955,  126, 3934, 3955,
      640,  706,  575,  580,  636,  640,  641,  642,  707,  757,
      702, 3955,  817, 3955,  109,  164,  158,  337,  354,  347,
      350,  547,  344,  467,  705,  570,  765,  786, 3932,  791,
     3955,  572, 3955,  166,  715,    0,  209,    0,    0,  812,

     3938,  213, 3930,  456,  646,  577,  457,  470,  472,  520,
      528,  659,  629,  525,  583,  710,  788,  593, 3878,  850,
      855,  768,  821,  487, 3955, 3930, 3927,  739,  716,  771,
      824,  849,  857,  814,  864,  866,  868,  869,  872,  871,
      874,  878,  881,  884,  873,  726,  898,  882,  899,  770,
      920,  913,  907,  908,  925,  932, 3933, 3925, 3873,  950,
        0,  973,  955,  977, 3923,    0,    0,  795,  943,  657,
      769,  928,  947,  952,  952,  966,  967,  965,  989, 3923,
      979,  984,  989, 1020, 1022, 1027, 1052, 1068, 1070, 1072,
     1090, 1111, 1152, 1118,    0, 1120,  977,  963,  974,  984,

     1045,  975,  988, 1028, 1120, 1002, 1007, 1050, 1118, 1057,
     1062, 1097, 1115, 1118, 1119, 1130, 1127, 1131, 1148, 1162,
     1165, 1165, 1156, 1173, 1165, 1159, 1218, 3921, 3955, 1226,
     3920, 1198, 1020, 1226, 3923,    0, 1177, 1177, 1201, 1205,
     1205, 1201, 1224, 1212, 1211, 1206, 1213, 1213, 1214, 1215,
     1223, 1229, 1242, 1236, 1239, 1238, 1230, 1224, 1239, 1231,
     1294, 3920, 1263, 1273, 1285, 1276, 1286, 1275, 1279, 1289,
     1295, 1296, 1300, 1302, 1301, 1303, 1305, 1312, 1307, 1328,
     1329, 1310, 1331, 1311, 1335, 1342, 1340, 1338, 1345, 1346,
     1350, 1354, 1365, 1351, 1366, 1371, 1374, 3955, 3955, 3955,

     1408, 3955, 1336, 1372, 1359, 1361, 1379, 1366, 1361, 1370,
     1382, 1388, 1404, 1406, 1390, 1415, 1436, 1428, 1435, 1469,
     1456, 1478, 1487, 1491, 1508, 1512, 1521, 1529, 1556, 1560,
     1456, 1394, 1411, 1424, 1436, 1441, 1456, 1441, 1486, 1503,
     1521, 1544, 1533, 1532, 1544, 1550, 1555, 1543, 1556, 1573,
     1557, 1560, 1567, 1567, 1573, 1583, 1580, 3955, 3955, 1573,
     1591, 1581, 1598, 1580, 1597, 1604, 1606, 1597, 1594, 1596,
     1594, 1598, 1612, 1613, 1618, 1622, 1605, 1618, 1627, 1611,
     1615, 1619, 1625, 1628, 1639, 1633, 1643, 1637,    0, 1658,
     1655, 1662, 1661, 3917, 1659, 1667, 1665, 1656, 1683, 1675,

     1678, 1680, 1686, 1688, 3916, 3915, 3914, 1689, 3911, 1696,
     1714, 1706, 1690, 1716, 1712, 3909, 1720, 1719, 1725, 1731,
     1732, 1737, 3907, 1739, 1723, 1720, 1716, 1740, 1731, 1726,
     1724, 1745, 1734, 1747, 1756, 1739, 1743, 1750, 1753, 1785,
     1784, 1792, 1812, 1794, 1833, 1837, 1839, 1846, 1855, 1864,
     1880, 1885, 1898, 1919, 1770, 1780, 1785, 1779, 1808, 1799,
     3906, 1824, 1825, 1858, 1846, 1896, 1902, 1889, 3903, 3896,
     1891, 1910, 1897, 1898, 1910, 3890, 1908, 1923, 1932, 1916,
     1933, 1928, 1935, 1926, 3888, 1934, 1935, 1934, 1932, 1937,
     1941, 1955, 1943, 3886, 3881, 1947, 3879, 1958, 1964, 1949,

     1950, 1954, 1963, 1969, 1975, 1975, 1964, 1980, 3877, 1977,
        0, 1987, 1994, 1990, 2001,  573, 2003, 2007, 2010, 2015,
     2017, 2024, 2013, 3873, 2018, 2021,  796,  829, 1043, 2022,
     1057, 2027, 2029, 2050, 2051, 2023, 2053, 1088, 2060, 2066,
     2071, 3869, 2041, 3868, 1141, 2043, 2040, 2031, 2059, 2059,
     2061, 2077, 2064, 2065, 2083, 2068, 2067, 2078, 2084, 2089,
     2087, 2107, 2149, 2116, 2143, 2159, 2165, 2181, 2198, 2208,
     2206, 2233, 2214, 2239, 2255, 2261, 3842, 3841, 2078, 2082,
     2085, 2120, 3839, 2096, 2100, 2112, 2125, 3838, 2127, 2129,
     3828, 3827, 2165, 2156, 2186, 2199, 2216, 3821, 2225, 2240,

     2242, 2239, 3815, 2260, 2260, 2281, 3804, 2273, 2270, 2274,
     2266, 2274, 2272, 2276, 2275, 3795, 3791, 2291, 3788, 2280,
     2284, 2301, 2302, 2294, 2296, 2311, 2298, 3780, 2293, 3713,
     3595, 2305, 3561, 2322, 2325, 1424, 2330, 2327, 2359, 2331,
     2338, 2339, 2348, 2351, 2353, 2352, 1778, 2356, 2324, 1113,
     2385, 2377, 3554, 2390, 2382, 2388, 2391, 2395, 2389, 2390,
     2413, 3539, 2396, 2398, 1846, 2405, 2138, 2421, 2416, 2391,
     2418, 2407, 2405, 2405, 2410, 2409, 2423, 2409, 2424, 2429,
     2420, 2433, 2422, 3538, 2455, 3487, 2463, 2468, 2472, 2504,
     2513, 2520, 2526, 2488, 2547, 2554, 2564, 2572, 2581, 2603,

     3483, 3482, 3466, 2421, 3450, 2434, 2461, 2459, 2546, 2462,
     2470, 2515, 2532, 3408, 2568, 2568, 1319, 2619, 3407, 2570,
     2574, 2586, 2597, 2644, 3391, 2595, 2593, 2604, 2607, 2606,
     3345, 2619, 2608, 2648, 2609, 2610, 2623, 2624, 2640, 2629,
     2649, 2652, 2670, 3344, 2654, 2656, 2659, 2659, 2646, 2652,
     2648, 2645, 3308, 2654, 3292, 2665, 2142, 2675, 2677, 1438,
     2680, 2676, 2713, 3288, 2683, 2697, 2702, 2704, 2705, 2708,
     2679, 1555, 2709, 3232, 1710, 2740, 2728, 3219, 2153, 2746,
     2737, 3135, 2719, 3114, 3113, 3096, 2755, 2185, 2722, 3083,
     2766, 2746, 2006, 2771, 3074, 2707, 2743, 2745, 2744, 2749,

     2761, 2765, 2765, 3068, 2765, 2768, 2768, 2759, 2756, 2752,
     2778, 2142, 2799, 2805, 2823, 2833, 2841, 2850, 2872, 3018,
     2889, 2893, 2902, 2906, 2910, 2941, 2791, 2795, 2835, 2770,
     2932, 2794, 2785, 2802, 2879, 2927, 2807, 2802, 2810, 2831,
     2893, 2865, 2893, 2905, 2910, 2898, 2876, 2890, 2863, 2858,
     2970, 2839, 2914, 2827, 2919, 2907, 2919, 2917, 2934, 2976,
     2938, 2946, 2942, 2958, 2951, 2965, 2966, 2809, 2986, 2808,
     2971, 2784, 2958, 2780, 2711, 2673, 2969, 2589, 2975, 2580,
     2996, 2570, 2984, 2998, 2990, 2994, 2992, 3002, 2991, 3005,
     2560, 2543, 2539, 3021, 3009, 2214, 3023, 3016, 2444, 2522,

     3014, 3021, 3029, 3047, 3023, 3032, 3052, 2508, 3057, 3051,
     3022, 3026, 3045, 3044, 3034, 3037, 3051, 2497, 2479, 3039,
     2474, 2459, 3050, 2458, 3060, 3073, 3065, 3085, 3092, 3093,
     3109, 3126, 2446, 3080, 2369, 3117, 2363, 2250, 3110, 2216,
     3153, 3169, 3173, 3057, 3155, 3064, 3081, 3141, 3134, 3143,
     2189, 2173, 3179, 3141, 2124, 3194, 3147, 2107, 2096, 3163,
     3162, 3166, 3158, 3159, 3167, 3162, 2039, 1908, 3166, 1894,
     3173, 1869, 1857, 1808, 1803, 1798, 3171, 1780, 1773, 1767,
     3200, 3191, 3192, 3193, 1722, 3209, 3201, 3204, 3206, 3216,
     3223, 3224, 3225, 3208, 3239, 3218, 3241, 3235, 3250, 3260,

     3264, 3270, 3238, 3274, 3244, 3278, 3212, 3247, 3257, 3248,
     3260, 1693, 3257, 1531, 3256, 3272, 3271, 3279, 3299, 3292,
     1504, 3320, 3287, 3295, 3315, 1444, 3328, 3337, 3327, 3344,
     1431, 3356, 3257, 3307, 1421, 3319, 3321, 1412, 3333, 3382,
     3336, 1372, 1250, 3334, 3338, 1198, 3351, 3342, 3342, 3345,
     1189, 1182, 3355, 3354, 1181, 3352, 1127, 3387, 1056, 3380,
     3375, 1045, 3387, 3388, 1044, 3406, 3416, 3424, 3390, 3410,
     3398, 3428, 3430, 3432, 3442, 3434, 1038, 3436, 3446, 3450,
     3383, 3426, 1024, 3439, 3429, 3440, 3432, 3447, 3448, 1002,
     3453, 3478, 3468, 3483, 3474, 3486, 3509, 3510, 3514, 3508,

     3516,  935,  934, 3447,  924, 3467, 3524, 3496,  904, 3539,
      894, 3513,  887,  877, 3510, 3511,  876, 3511, 3513,  841,
     3546, 3550, 3544, 3532, 3565, 3547, 3553,  817, 3560, 3576,
     3580, 3584, 3575, 3559, 3590, 3581, 3597,  818,  783, 3578,
      728, 3572, 3570,  727,  695, 3595, 3603,  694, 3591, 3610,
     3613, 3615,  689, 3629, 3576,  640, 3654, 3593, 3636,  640,
      604, 3593,  600, 3621,  572,  558, 3623, 3615,  549, 3658,
     3648,  541, 3662, 3663, 3655, 3661, 3675, 3666,  540, 3680,
     3640,  536, 3660, 3682, 3674, 3689, 3690,  535, 3670, 3700,
     3705,  528, 3663,  493, 3665,  488, 3673,  470, 3713, 3698,

     3715, 3691, 3729, 3733, 3724, 3727, 3739,  379, 3691, 3743,
      374, 3744, 3750, 3740, 3755, 3731,  345, 3724, 3742,  344,
     3760,  204, 3769, 3753, 3775, 3747, 3786, 3795, 3778, 3742,
      195, 3748, 3811, 3789,  185, 3819, 3750, 3823, 3802,  167,
      120,  112, 3836, 3820,   98,   82,   78, 3843, 3847, 3857,
     3861, 3865, 3955, 3870, 3873, 3881, 3889, 3898, 3907, 3911,
     3919
    } ;

static yyconst flex_int16_t yy_def[1262] =
    {   0,
     1253,    1, 1254, 1254, 1254, 1254, 1253,    7, 1253,    9,
        9,   11,   11,   11, 1253,   15, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1253, 1253, 1256, 1253, 1253, 1253, 1256, 1253, 1253,
     1253, 1253, 1253, 1257, 1257, 1253, 1253, 1253, 1257, 1253,
     1258, 1258,   62,   62,   62,   62,   62,   62,   62,   62,
       62, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1259, 1253, 1260,   19, 1253,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1253, 1253, 1253, 1253,
     1256, 1253, 1256, 1253, 1253, 1257,   55, 1253, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1253, 1257,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   73, 1253, 1253, 1253, 1253, 1253,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1259, 1260, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1253, 1253, 1253,

     1253, 1253, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1261, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,

     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1261, 1255, 1255, 1255, 1255, 1253, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1253, 1253, 1253, 1255,
     1253, 1255, 1255, 1255, 1255, 1255, 1255, 1253, 1255, 1255,
     1255, 1255, 1255, 1255, 1253, 1255, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1255, 1255, 1255, 1253, 1255, 1255, 1253, 1255,
     1255, 1255, 1255, 1255, 1255, 1255, 1253, 1255, 1255, 1253,
     1253, 1253, 1255, 1253, 1255, 1255, 1255, 1255, 1255, 1255,
     1253, 1255, 1255, 1255, 1253, 1255, 1253, 1253, 1255, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257,   62, 1253,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1255, 1255, 1253,
     1255, 1255, 1253, 1253, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1253, 1255, 1255, 1253, 1253, 1253, 1253, 1253, 1253,
     1255, 1255, 1255, 1255, 1255, 1255, 1253, 1253, 1255, 1255,
     1253, 1255, 1253, 1253, 1255, 1257, 1257, 1257, 1257, 1257,

     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
       62, 1253,   62,   62,   62,   62,   62,   62,   62, 1253,
       62,   62,   62,   62,   62,   62, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1255, 1255, 1253, 1255, 1255, 1255, 1255, 1255, 1255,
     1255, 1255, 1255, 1253, 1255, 1253, 1253, 1255, 1253, 1255,

     1253, 1253, 1253, 1253, 1255, 1253, 1253, 1255, 1253, 1253,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257,   62, 1253,   62,   62,   62,   62,
       62,   62, 1253, 1253, 1253,   62, 1253, 1253,   62, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1255, 1255, 1255, 1255, 1255, 1255, 1255, 1253,
     1253, 1253, 1255, 1253, 1253, 1255, 1253, 1253, 1253, 1253,

     1253, 1253, 1255, 1253, 1253, 1253, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257,   62,   62,   62,   62,   62,
     1253,   62, 1253, 1253, 1253, 1253, 1253, 1253,   62, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1255, 1255,
     1253, 1255, 1255, 1255, 1255, 1253, 1253, 1253, 1255, 1253,
     1255, 1253, 1253, 1253, 1253, 1253, 1255, 1253, 1253, 1253,
     1257, 1257, 1257, 1257, 1257, 1257, 1257,   62,   62, 1253,
       62,   62, 1253,   62, 1253, 1253, 1253, 1253, 1253,   62,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1255, 1253, 1253, 1255, 1255, 1253, 1253,
     1253, 1253, 1255, 1255, 1253, 1253, 1253, 1253, 1257, 1257,
     1257, 1257, 1257, 1257, 1253,   62, 1253, 1253,   62, 1253,
       62, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1255, 1253, 1253, 1255, 1253, 1253, 1255, 1255, 1253,
     1257, 1257, 1257, 1253,   62, 1253, 1253, 1253,   62, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1253, 1255, 1253, 1253, 1255, 1253, 1253, 1257, 1257, 1253,
     1253, 1253, 1253,   62, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1255, 1253, 1255, 1253, 1257, 1253, 1253,   62, 1253,
     1253, 1253, 1253, 1253, 1255, 1253, 1257, 1253,   62, 1253,
     1253, 1253, 1253, 1253, 1257, 1253, 1253, 1253, 1253, 1253,
     1253, 1253,    0, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253
    } ;

static yyconst flex_int16_t yy_nxt[4022] =
    {   0,
       18,   19,   20,   21,   19,   22,   22,   23,   18,   22,
       22,   24,   18,   22,   25,   26,   27,   28,   29,   30,
       31,   27,   27,   32,   27,   33,   34,   35,   36,   27,
       37,   38,   39,   40,   27,   27,   41,   27,   27,   42,
       18,   26,   27,   28,   29,   30,   31,   27,   27,   32,
       27,   33,   34,   35,   36,   27,   37,   38,   39,   40,
       27,   27,   41,   27,   27,   43,   45,   46,   21,   47,
       48,   48,  126,  124,   48,   48,  124,  140,   48,   25,
       72,   90,   74,   72,   72,   90,   74,   72,  120,  121,
      120,  120, 1249,   72,  122,  122, 1250,   72,  122,  122,

      126,  103,  122,  140,   49,   45,   46,   21,   47,   48,
       48,  126, 1246,   48,   48,  137,  126,   48,   25,  100,
      100,  100,  100,  126,  130,  128, 1247,  179,  129,  135,
      179,  126,  103,  126, 1243,  131,  133,  206,  132,  136,
      134,  137,  141,   49,   50,   51,   52,   53,   48,   48,
      130,  128,   48,   48,  129,  135,   48,   53,  126,  126,
      126,  131,  133,  206,  132,  136,  134,  233,  141,  233,
      233,  138,  139,  126,  142,  144,  146,  210,  143,  207,
      145, 1246,   53,   50,   51,   52,   53,   48,   48,  126,
      208,   48,   48,  209,  147,   48,   53,  138,  139, 1244,

      142,  144,  146,  210,  143,  207,  145,  163,  163, 1241,
      124,  163,  163,  124,  124,  163,  208,  124, 1234,  209,
      147,   53,   54,   55,   56,   57,   55,   54,   54,   54,
       54,   54,   54,   58,   54,   59,   60,   61,   61,   62,
       63,   64,   61,   61,   61,   65,   61,   66,   61,   67,
       61,   61,   68,   69,   70,   71,   61,   61,   61,   61,
       61,   54,   54,   61,   61,   62,   63,   64,   61,   61,
       61,   65,   61,   66,   61,   67,   61,   61,   68,   69,
       70,   71,   61,   61,   61,   61,   61,   54,   72,   73,
       72,   74,   73,   72,   72,   72,   72,   72,   72,   72,

       72,   72,   72,   75,   72,   76,   77,   78,   72,   72,
       72,   79,   72,   80,   81,   82,   72,   72,   83,   84,
       85,   86,   72,   72,   72,   72,   72,   72,   72,   75,
       72,   76,   77,   78,   72,   72,   72,   79,   72,   80,
       81,   82,   72,   72,   83,   84,   85,   86,   72,   72,
       72,   72,   72,   72,   87,   87,   88,   87, 1225, 1221,
      126,  152,  126,  156,  211,  153,  215,   89,   72,  154,
       72,   72,   72,  216,  212,  219,   72,  155,   72,   72,
       72,  213,  214,   72,   72,   72,   72,  152, 1227,  156,
      211,  153,  215, 1211,   72,  154,   72,   72,   72,  216,

      212,  219,   72,  155,   72,   72,   72,  213,  214,   72,
       72,   72,   72,   91,   92,   93,   94,   92,   95,   91,
       91,   95,   96,   91,   97,   95,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   95,   99,
      100,  100,   99,  157, 1220,  101,  220,  237,  124,  102,
      158,  124,  103,  104,  243,  105,  106,  107,  108,  244,

      245,  109, 1203,  110,  111,  112,  113, 1217,  114,  115,
      116,  117,  220,  237,  118,  100,  100,  100,  100,  104,
      243,  105,  106,  107,  108,  244,  245,  109,  103,  110,
      111,  112,  113,  126,  114,  115,  116,  117,  148,  246,
      118,  159, 1211,  119,  100,  162,  100,  100,  149, 1213,
     1188,  247,  150,  151, 1206, 1200,  252,  103,  100,  100,
      100,  100,  217, 1180,  148,  246,  218,  164,  164,  164,
      164,  103, 1177,  232,  149,  233,  232,  247,  150,  151,
      165,  167,  252,  102,  167,  262, 1196,  639,  217,  225,
      181,  168,  218,  226,  185,  181,  241,  169,  170,  171,

      242,  181,  253,  172,  181,  173,  181,  174,  260,  181,
      175,  176,  177,  178, 1174,  225,  181,  186, 1171,  226,
      185,  181,  241,  169,  170,  171,  242,  181,  253,  172,
      181,  173,  181,  174,  260,  181,  175,  176,  177,  178,
      166,  166, 1160,  186,  166,  166,  166,  166,  166,  166,
      166,  181,  166,  166, 1188,  181,  181,  181,  250,  188,
      189,  238,  181,  251,  187,  181,  181,  181,  181,  181,
      181,  181,  239,  190,  248,  240,  306,  181,  249,  166,
      166,  181,  181,  181,  250,  188,  189,  238,  181,  251,
      187,  181,  181,  181,  181,  181,  181,  181,  239,  190,

      248,  240,  306, 1190,  249,  166,  166,  166, 1187, 1184,
      166,  166,  166,  166,  166,  166,  166,  181,  166,  166,
      234,  182,  181,  234,  221,  194,  191,  234,  181,  254,
      126,  181,  183,  181,  222,  184,  181,  264,  223,  224,
      126, 1153, 1148,  181,  255,  166,  166,  182,  181,  284,
      221,  194,  191,  126,  181,  254,  263,  181,  183,  181,
      222,  184,  181,  264,  223,  224,  227,  227,  227,  227,
      255,  166,  181,  122,  122,  284,  192,  122,  122,  228,
      234,  122,  263,  181,  126,  126,  181,  227,  227,  227,
      227,  193,  230,  230,  230,  230,  179, 1145,  181,  179,

      228,  290,  192,  256,  265,  231,  307,  257,  262,  181,
      650,  258,  181,  100,  100,  100,  100,  193,  195,  259,
     1138,  195,  261,  261,  261,  261,  103,  290,  126,  256,
      265, 1176,  307,  257,  196,  197,  198,  258,  126,  266,
      199,  262,  200,  651,  201,  259,  271,  202,  203,  204,
      205,  120,  121,  120,  120, 1169,  120,  121,  120,  120,
      196,  197,  198,  126,  103,  266,  199,  267,  200,  103,
      201,  126,  271,  202,  203,  204,  205,  269,  126,  268,
      126,  273,  126,  126,  275,  126,  126,  126,  126,  270,
     1166, 1163,  126,  267,  272,  126,  126,  274,  126,  288,

      283, 1125,  278,  269,  276,  268,  279,  273, 1161,  277,
      275,  280,  126,  126,  281,  270,  285,  282, 1153,  289,
      272,  126,  126,  274,  286,  288,  283,  126,  278,  293,
      276,  287,  279,  294,  126,  277,  291,  280, 1148,  126,
      281,  295,  285,  282,  296,  289,  126,  292, 1145, 1154,
      286,  301,  301,  301,  301,  293,  308,  287,  303,  294,
      163,  163,  291,  297,  163,  163,  309,  295,  163,  304,
      296,  310,  305,  292,  100,  162,  100,  100,  164,  164,
      164,  164,  308,  311,  303,  312,  313,  103,  315,  297,
      179,  165,  309,  179,  181,  304,  210,  310,  305,  181,

      212,  314,  214,  215,  317,  181,  219,  220,  181,  311,
      181,  312,  313,  181,  315,  181, 1147,  316,  181,  334,
      181,  233,  210,  233,  233,  181,  212,  314,  214,  215,
      317,  181,  219,  220,  181,  181,  181,  181, 1090,  181,
      335,  181,  320,  316,  181,  334,  181,  221,  181,  181,
      318,  181, 1136,  181,  319,  262,  181,  652, 1129, 1126,
      332,  181,  224,  181,  218,  336,  335,  181,  320,  262,
     1123,  654,  181,  221,  181,  181,  318,  181,  181,  181,
      319,  181,  181,  181,  321,  181,  332,  181,  224,  339,
      218,  336,  340,  181,  181,  324,  181,  181,  181,  181,

      262,  181,  661,  323,  181,  181,  322,  181,  325,  181,
      321,  181,  341,  181,  775,  339,  326,  775,  340,  181,
      181,  324,  181,  181,  181,  181,  181,  181,  327,  323,
      342,  181,  322,  181,  325,  207,  337,  181,  341,  333,
      181, 1121,  326,  226,  181,  181,  208,  181,  338,  331,
      343,  330,  181,  262,  327,  668,  342,  344,  345,  181,
      346,  207,  337,  181,  347,  333,  181,  181,  328,  226,
      181,  348,  208,  181,  338,  331,  343,  330,  181,  329,
      349,  181,  351,  344,  345,  352,  346,  353,  350,  354,
      347,  356,  357,  181,  328, 1073, 1068,  348,  360,  232,

      355,  233,  232, 1067,  181,  329,  349,  181,  351,  102,
      361,  352, 1113,  353,  350,  354,  362,  356,  357,  227,
      227,  227,  227,  363,  360,  365,  355,  230,  230,  230,
      230,  234,  228,  367,  234,  364,  361,  366,  234,  368,
      231,  369,  362,  370,  371,  372,  373,  374,  375,  363,
      376,  365,  377,  381,  384,  382,  385,  386,  387,  367,
      378,  364,  388,  366, 1058,  368,  383,  369,  379,  370,
      371,  372,  373,  374,  375,  380,  376,  126,  377,  381,
      384,  382,  385,  386,  387,  390,  378,  126,  388,  126,
      126,  234,  383,  126,  379,  261,  261,  261,  261,  126,

      126,  380,  396,  126,  392,  394,  397,  391,  393,  126,
      126,  390,  398,  395,  126,  126,  126,  126,  399,  126,
      844,  126,  402,  844,  126,  126,  126,  400,  396,  409,
      392,  394,  397,  391,  393,  401,  403,  405,  398,  395,
      406,  404,  126,  126,  399,  126,  411,  410,  402,  126,
      407,  408,  126,  400,  126,  409,  126,  413,  412,  126,
      126,  401,  403,  405,  126,  126,  406,  404,  126,  425,
      421,  415,  411,  410,  414,  417,  407,  408,  416,  126,
      126,  419,  418,  413,  412,  126, 1110,  426,  126,  427,
      423,  420,  422,  428,  429,  425,  421,  415,  430,  431,

      414,  417,  424,  432,  416,  433,  434,  419,  418,  301,
      301,  301,  301,  426,  435,  427,  423,  420,  422,  428,
      429,  436,  437,  439,  430,  431, 1107,  456,  424,  432,
      181,  433,  434,  438,  440, 1090,  262,  457,  760,  884,
      435,  181,  884,  181,  181, 1102,  458,  436,  437,  439,
      181,  181,  443,  456,  181,  459,  181,  181, 1097,  438,
      440,  181,  181,  457,  181,  181,  442,  181,  441,  181,
      181,  181,  458,  460,  455,  461,  181,  181,  443,  462,
      181,  459,  181,  181,  181,  181,  338,  181,  181,  445,
      181,  181,  442,  181,  441,  181,  444,  181,  181,  460,

      455,  461,  181,  463,  181,  462,  181,  181,  181,  447,
      181,  181,  338,  181,  446,  445,  181,  181, 1093,  181,
      181,  181,  444,  181,  181,  464,  448,  450,  181,  463,
      181,  449,  181,  181,  181,  447,  181,  181,  181,  181,
      446,  181,  181,  181,  181, 1026,  181,  181,  465,  181,
      181,  464,  448,  450,  451,  181,  894,  449,  181,  894,
      181,  452,  181,  181,  181,  466,  467,  181,  468,  469,
      181,  181,  470,  181,  465,  181,  181,  471,  472,  473,
      451,  181,  181,  453,  181,  181,  454,  452,  474,  181,
      475,  466,  467,  476,  468,  469,  477,  181,  470,  478,

      479,  181,  480,  471,  472,  473,  481,  482,  181,  453,
      483,  181,  454,  484,  474,  181,  475,  485,  486,  476,
      487,  488,  477,  489,  490,  478,  479,  491,  480,  492,
      493,  494,  481,  482,  495,  496,  483,  497,  498,  484,
      499,  500,  501,  485,  486,  502,  487,  488,  503,  489,
      490,  504,  505,  491,  506,  492,  493,  494,  507,  508,
      495,  496,  509,  497,  498,  510,  499,  500,  501,  126,
      126,  502,  126,  126,  503,  126,  126,  504,  505,  126,
      506,  126,  513,  514,  507,  508,  517,  512,  509,  126,
      520,  510,  126,  515,  126,  518,  519,  126,  521,  524,

      126,  525,  126,  126,  126,  522,  523, 1021,  513,  514,
      126,  775,  517,  512,  775,  532,  520,  526,  530,  515,
      126,  518,  519,  535,  521,  524,  126,  525,  126,  533,
      126,  522,  523,  126,  126,  537, 1061,  534,  540,  126,
      541,  532,  547,  526,  530,  126,  126,  536,  539,  535,
      542,  126,  548,  126,  549,  533,  544,  550,  551,  552,
      553,  537,  546,  534,  540,  543,  541,  554,  547,  555,
      556,  557,  558,  536,  539,  559,  542,  560,  548,  561,
      549, 1006,  544,  550,  551,  552,  553, 1057,  546,  577,
      262,  543,  772,  554, 1004,  555,  556,  557,  558,  181,

      181,  559,  578,  560,  579,  561,  562,  181,  580,  181,
      181,  181, 1001,  181,  181,  577,  563, 1000,  181,  564,
      181,  181,  999,  181,  566,  181,  181,  181,  578,  581,
      579,  582,  562,  181,  580,  181,  181,  181,  181,  181,
      181,  181,  563,  565,  181,  564,  181,  181,  567,  181,
      566,  584,  181,  181,  181,  581,  585,  582,  262,  181,
      791,  570,  181,  181,  181,  181,  568,  181,  569,  565,
      181, 1055,  181,  586,  567,  181,  587,  584,  181,  181,
      181,  181,  585,  997,  181,  181,  571,  570,  181,  181,
      181,  181,  568,  181,  569,  181,  181,  572,  181,  586,

      181,  181,  587,  573,  574,  181,  181,  181,  994,  181,
      181,  181,  571,  575,  181,  588,  181,  589,  590,  181,
      593,  181, 1052,  572,  181,  594,  181,  181,  595,  573,
      574,  596,  181,  597,  181,  181,  599,  181,  576,  575,
      181,  588,  600,  589,  590,  181,  593,  601,  181,  602,
      181,  594,  603,  181,  595,  604,  605,  596,  606,  597,
      181,  608,  599,  609,  576,  610,  611,  612,  600,  613,
      614,  181,  615,  601,  181,  602,  618,  620,  603,  621,
      622,  604,  605,  623,  606,  624,  625,  608,  626,  609,
      627,  610,  611,  612,  628,  613,  614,  629,  615,  630,

      632,  126,  618,  620,  126,  621,  622,  909,  126,  623,
      909,  624,  625,  634,  626,  636,  627,  126,  633,  635,
      628,  126,  640,  629,  126,  630,  632,  126,  637,  126,
      641,  126,  126,  642,  638,  126,  126,  126,  126,  634,
      653,  126,  646,  126,  633,  635,  648,  643,  640,  644,
      645,  659,  649, 1051,  637,  126,  641,  126,  655,  642,
      638,  670,  656,  671,  126,  126,  653,  126,  646,  657,
      658,  669,  648,  643,  126,  644,  645,  659,  649,  666,
      126,  662,  660,  663,  655,  126,  672,  670,  656,  671,
      673,  674,  675,  676,  677,  657,  658,  669,  678,  679,

      680,  681,  664,  682,  683,  666,  684,  662,  660,  663,
     1043,  704,  672,  705,  706,  710,  673,  674,  675,  676,
      677, 1042,  181,  711,  678,  679,  680,  681,  664,  682,
      683,  181,  684,  181,  686,  689,  685,  704, 1026,  705,
      706,  710,  181,  926,  712,  181,  926,  707,  181,  711,
      262,  713,  793,  708,  262,  715,  881,  181,  181,  181,
      716,  689,  685,  686,  181,  262,  690,  897,  181,  181,
      712,  181,  181,  707,  181,  181,  687,  713,  181,  708,
      181,  715,  688,  719,  181,  691,  716, 1021,  181,  720,
      181,  181,  690,  692,  181,  181,  181,  262,  181,  904,

      181,  181,  687, 1038,  181,  721,  181,  181,  688,  719,
      181,  691,  693,  181,  181,  720,  694,  181,  722,  692,
      181,  181,  181,  181,  181,  696,  262,  181,  994,  181,
     1030,  721,  181,  181,  181,  181,  181,  181,  693,  181,
      181,  695,  694,  698,  722,  723,  725,  181,  181,  181,
      181,  696,  697,  181,  181,  181,  699,  726,  181,  181,
      181,  181,  181,  181, 1028,  181,  181,  695,  181,  698,
      181,  723,  725,  727,  181,  701,  181,  728,  697,  729,
      181,  181,  699,  726,  181,  181,  700,  181,  181,  730,
      181,  181,  735,  736,  181,  731,  181,  737,  738,  727,

      739,  740,  181,  728,  741,  729,  742,  181,  732,  744,
      181,  745,  700,  181,  733,  730,  181,  746,  735,  736,
      747,  748,  749,  737,  738,  750,  739,  740,  751,  752,
      741,  754,  742,  756,  732,  744,  126,  745,  126,  126,
      733,  126,  774,  746,  126,  126,  747,  748,  749,  761,
      758,  750,  126,  126,  751,  752,  759,  754,  762,  756,
      763,  764,  126,  763,  765,  126,  126,  126,  774,  767,
      126,  766,  770,  773,  769,  761,  758, 1027,  777,  778,
      768,  777,  759, 1025,  762,  771,  776,  776,  776,  776,
      765,  780,  780,  780,  780,  767,  126,  766,  770,  773,

      769,  781,  126,  126,  126,  126,  768,  782,  783,  126,
      126,  771,  126,  784,  787,  787,  787,  787,  786,  126,
      796,  785,  794,  794,  794,  794,  799,  781,  800,  789,
      126,  801,  686,  782,  783,  792,  790,  795,  802,  784,
      803,  804,  805,  806,  786,  797,  796,  785,  807,  808,
      809,  798,  799,  810,  800,  789,  262,  801,  997,  830,
     1023,  792,  790,  795,  802,  832,  803,  804,  805,  806,
      181,  797,  940,  938,  807,  808,  809,  798,  181,  810,
      833,  181,  813,  181,  181,  830,  811,  181,  937,  181,
      834,  832,  181,  935,  181,  837,  181,  181,  181,  814,

      838,  181,  820,  181,  181,  815,  833,  181,  813,  181,
      181,  933,  811,  181,  181,  181,  834,  181,  181,  181,
      181,  837, 1005,  181,  181,  814,  838,  181,  181,  181,
      181,  815,  817,  181,  816,  181,  998,  818,  839,  181,
      181,  181,  181,  181,  819,  181,  181,  835,  836,  181,
      835,  840,  181,  992,  181,  181,  181,  991,  817,  181,
      816,  181,  181,  818,  839,  181,  821,  181,  181,  181,
      819,  822,  181,  181,  990,  181,  181,  840,  181,  181,
      181,  181,  823,  181,  982,  842,  843,  181,  181,  847,
      181,  848,  821,  181,  980,  181,  181,  822,  181,  181,

      824,  181,  181,  978,  849,  181,  181,  181,  823,  181,
      181,  842,  843,  181,  825,  847,  181,  848,  181,  181,
      845,  846,  181,  845,  181,  850,  824,  181,  853,  181,
      849,  854,  181,  181,  855,  856,  181,  857,  858,  859,
      825,  826,  861,  862,  181,  851,  851,  851,  851,  860,
      764,  850,  860,  863,  853,  181,  864,  854,  181,  865,
      855,  856,  866,  857,  858,  859,  867,  826,  861,  862,
      868,  869,  778,  871,  869,  872,  873,  874,  875,  863,
      876,  877,  864,  878,  879,  865,  880,  976,  866,  126,
      126,  126,  867,  126,  126,  886,  868,  126,  893,  871,

      883,  872,  873,  874,  875,  887,  876,  877,  882,  878,
      879,  126,  880,  885,  763,  764,  126,  763,  126,  126,
      888,  886,  126,  126,  893,  975,  883,  890,  895,  777,
      778,  887,  777,  126,  882,  889,  126,  891,  911,  885,
      892,  776,  776,  776,  776,  905,  888,  780,  780,  780,
      780,  126,  900,  890,  895,  898,  787,  787,  787,  787,
      126,  889,  912,  891,  911,  908,  892,  907,  907,  907,
      907,  905,  794,  794,  794,  794,  913,  914,  900,  915,
      916,  898,  917,  918,  919,  920,  921,  922,  912,  923,
      924,  908,  941,  181,  974,  941,  942,  836,  972,  942,

      944,  925,  913,  914,  181,  915,  916,  181,  917,  918,
      919,  920,  921,  922,  181,  923,  924,  946,  947,  181,
      181,  948,  897,  970,  928,  181,  944,  925,  181,  949,
      181,  181,  927,  181,  181,  950,  943,  846,  181,  943,
      181,  940,  951,  946,  947,  929,  181,  948,  181,  181,
      928,  181,  181,  956,  181,  949,  181,  181,  927,  181,
      181,  950,  181,  952,  181,  181,  930,  181,  951,  932,
      181,  929,  938,  931,  181,  181,  181,  937,  181,  181,
      835,  836,  181,  835,  954,  181,  933,  181,  181,  952,
      935,  181,  930,  181,  953,  932,  181,  953,  181,  931,

      846,  181,  181,  935,  181,  181,  844,  933,  181,  844,
      954,  845,  846,  181,  845,  181,  937,  181,  181,  181,
      938,  181,  181,  955,  181,  181,  936,  181,  181,  836,
      181,  181,  181,  939,  181,  181,  181,  957,  958,  181,
      959,  181,  960,  181,  181,  181,  945,  181,  181,  955,
      961,  181,  936,  962,  181,  940,  181,  181,  181,  939,
      963,  181,  181,  957,  958,  181,  959,  181,  960,  964,
      181,  851,  851,  851,  851,  965,  961,  860,  764,  962,
      860,  966,  181,  967,  968,  969,  963,  869,  778,  971,
      869,  973,  977,  181,  979,  964,  181,  981,  126,  884,

      981,  965,  884,  983,  126,  126,  126,  966,  126,  967,
      968,  969,  984,  985,  988,  971,  126,  973,  977,  126,
      979,  986,  894,  126,  995,  894,  262,  995,  999,  983,
      126,  987,  934,  262,  989, 1000,  993,  126,  984,  985,
      988,  262,  996, 1001,  262, 1007, 1004,  986, 1002, 1002,
     1002, 1002, 1003,  907,  907,  907,  907,  987,  909, 1008,
      989,  909,  993,  262, 1009, 1006, 1010, 1011,  996, 1012,
     1013, 1007, 1014, 1015,  926,  181, 1031,  926, 1003, 1016,
      181, 1024,  820, 1033, 1024, 1008,  181, 1017,  910,  181,
     1009,  181, 1010, 1011,  181, 1012, 1013,  906, 1014, 1015,

      181,  181, 1031, 1034, 1018, 1016,  181,  181,  181, 1033,
      903,  181,  181, 1017,  181,  181, 1020,  181,  181,  181,
      181, 1019,  181, 1021,  181,  181,  181,  902,  901, 1034,
     1018, 1026,  181,  181,  181,  181,  181,  181,  181, 1029,
      181,  181, 1020,  181,  181,  181,  181, 1019,  181,  899,
      181,  181,  181, 1022,  941,  181, 1032,  941,  181, 1032,
     1035,  181,  181, 1036,  181, 1029, 1037,  181, 1039,  181,
      942,  836,  181,  942,  943,  846, 1041,  943,  181, 1022,
      953,  181, 1044,  953, 1045, 1046, 1035, 1047, 1048, 1036,
     1049, 1050, 1037, 1053, 1039, 1040, 1040, 1040, 1040, 1054,

     1056,  981, 1041,  262,  981, 1058,  126,  126, 1044, 1070,
     1045, 1046, 1070, 1047, 1048,  126, 1049, 1050,  126, 1053,
      126,  778, 1060,  126, 1059, 1054, 1056, 1062,  262, 1063,
     1066, 1081,  126, 1064, 1065,  262,  262, 1067, 1068,  126,
      995, 1071, 1072,  995, 1069, 1072,  896,  262, 1060, 1073,
     1059, 1074,  126, 1062, 1074, 1063,  262, 1081, 1079, 1064,
     1065, 1075, 1075, 1075, 1075, 1076, 1077, 1071, 1076, 1082,
     1069, 1002, 1002, 1002, 1002, 1078, 1083, 1084, 1078, 1080,
     1080, 1080, 1080, 1085, 1086, 1087,  181,  181, 1095, 1103,
      764, 1095, 1077, 1090,  181, 1082, 1024,  181,  181, 1024,

     1089,  181, 1083, 1084, 1088,  181,  793,  181,  181, 1085,
     1086, 1087,  181,  181,  181, 1103, 1096, 1091,  181, 1096,
      181, 1092,  791,  181,  181,  181, 1089,  181,  181, 1098,
     1088,  181, 1098,  181,  181,  181, 1104, 1105, 1099, 1094,
      181, 1099,  181, 1091,  181, 1101,  181, 1092, 1101,  181,
     1106,  181, 1108,  181,  181, 1100,  181, 1032,  870,  760,
     1032,  181, 1104, 1105, 1109, 1094, 1111, 1112,  181, 1114,
     1115, 1116,  181, 1117, 1118,  181, 1106, 1119, 1108,  181,
     1120, 1100,  181, 1040, 1040, 1040, 1040,  262, 1122, 1125,
     1109, 1122, 1111, 1112,  126, 1114, 1115, 1116, 1124, 1117,

     1118,  126,  126, 1119,  126,  852, 1120, 1130, 1130, 1130,
     1130, 1070,  126, 1127, 1070, 1139, 1128, 1131, 1131, 1131,
     1131,  820,  841, 1133, 1124, 1132, 1132, 1132, 1132, 1072,
     1134, 1135, 1072, 1074, 1135, 1076, 1074, 1078, 1076, 1127,
     1078, 1139, 1128, 1075, 1075, 1075, 1075, 1137, 1138, 1133,
     1137, 1080, 1080, 1080, 1080, 1140, 1134, 1141, 1142, 1143,
     1144, 1145,  181,  181,  831, 1155, 1146, 1148,  181, 1150,
     1150, 1150, 1150,  181,  181, 1095,  181,  181, 1095,  181,
      829, 1140,  181, 1141, 1142, 1143, 1144, 1096,  181,  181,
     1096, 1155, 1146,  181,  181, 1156,  828,  827,  181,  181,

      181,  812,  181,  181,  181,  181, 1149,  181,  181,  181,
     1152, 1098,  181, 1152, 1098, 1099, 1151, 1101, 1099,  181,
     1101, 1156, 1153,  181,  181, 1157, 1157, 1157, 1157, 1158,
      181, 1162, 1149,  181,  181,  181, 1164,  181,  181, 1165,
     1159, 1160, 1151, 1159, 1167, 1168,  126, 1170, 1138,  181,
     1170, 1122,  701,  788, 1122, 1158,  262, 1162, 1171,  262,
      181, 1174, 1164,  181, 1172, 1165, 1173,  126,  779, 1173,
     1167, 1168,  262,  126, 1177,  757, 1175, 1130, 1130, 1130,
     1130, 1131, 1131, 1131, 1131, 1132, 1132, 1132, 1132,  126,
     1172, 1135, 1179,  262, 1135, 1180, 1181, 1178, 1137, 1138,

     1182, 1137, 1175, 1183, 1186, 1188,  181, 1186, 1192,  668,
      181, 1150, 1150, 1150, 1150, 1193, 1152,  181, 1179, 1152,
      181,  181, 1181, 1178,  181, 1194, 1182, 1185,  181, 1183,
     1191, 1160,  181, 1191, 1192, 1189,  181, 1159, 1160,  181,
     1159, 1193,  181,  181, 1195, 1197,  181,  181, 1198, 1199,
      181, 1194, 1199, 1185,  181, 1157, 1157, 1157, 1157, 1170,
     1138, 1189, 1170, 1173, 1201,  181, 1173, 1201,  181,  126,
     1195, 1197, 1208,  262, 1198, 1203, 1204, 1204, 1204, 1204,
      126, 1207, 1209, 1210, 1207,  181, 1210, 1202, 1211,  181,
     1186, 1212, 1216, 1186, 1212, 1205,  181, 1218, 1208, 1214,

      181, 1215, 1219,  181, 1215,  126, 1191, 1160, 1209, 1191,
      262,  181, 1221, 1202, 1199,  181, 1201, 1199, 1216, 1201,
     1226, 1205,  181, 1218, 1222, 1214,  181,  755, 1219,  181,
     1223, 1223, 1223, 1223, 1204, 1204, 1204, 1204,  126,  262,
     1207, 1225, 1224, 1207, 1210, 1212, 1226, 1210, 1212, 1230,
     1222, 1228, 1228, 1228, 1228,  181, 1215, 1231, 1229, 1215,
     1232, 1233, 1233, 1233, 1233, 1237,  181,  126, 1224,  181,
     1223, 1223, 1223, 1223, 1240, 1230, 1236, 1236, 1236, 1236,
     1242,  181, 1245, 1231, 1229, 1235, 1232, 1238, 1238, 1238,
     1238, 1237,  181,  181,  753,  181, 1228, 1228, 1228, 1228,

     1240,  262,  654, 1243,  181,  743, 1242,  181, 1245,  651,
     1239, 1235, 1233, 1233, 1233, 1233, 1246,  181,  734,  181,
     1236, 1236, 1236, 1236, 1238, 1238, 1238, 1238,  181,  701,
      181,  181,  262,  181, 1249,  724, 1239, 1248, 1248, 1248,
     1248,  718,  717,  181, 1248, 1248, 1248, 1248, 1251, 1251,
     1251, 1251,  714,  709,  181,  703,  702,  181, 1252, 1252,
     1252, 1252, 1251, 1251, 1251, 1251, 1252, 1252, 1252, 1252,
       44,   44,   44,   44,   44,   44,   44,   44,   44,  127,
      127,  161,  667,  665,  161,  161,  161,  647,  161,  166,
      166,  631,  166,  619,  166,  617,  166,  166,  181,  181,

      616,  181,  607,  181,  598,  181,  181,  235,  235,  235,
      592,  235,  235,  235,  235,  235,  236,  591,  236,  511,
      583,  545,  511,  538,  511,  531,  511,  511,  529,  528,
      527,  516,  389,  359,  358,  229,  180,  302,  300,  299,
      298,  126,  262,  160,  125,  123,  229,  180,  158,  160,
      126,  125,  123, 1253,   17, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253
    } ;

static yyconst flex_int16_t yy_chk[4022] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,   33,   24,    3,    3,   24,   33,    3,    3,
       13,   13,   13,   13,   14,   14,   14,   14,   20,   20,
       20,   20, 1247,   13,   22,   22, 1246,   14,   22,   22,

       31,   20,   22,   33,    3,    4,    4,    4,    4,    4,
        4,   26, 1245,    4,    4,   31,   30,    4,    4,   21,
       21,   21,   21,   28,   28,   26, 1242,   58,   26,   30,
       58,   29,   21,   34, 1241,   28,   29,   75,   28,   30,
       29,   31,   34,    4,    5,    5,    5,    5,    5,    5,
       28,   26,    5,    5,   26,   30,    5,    5,   32,   37,
       36,   28,   29,   75,   28,   30,   29,   94,   34,   94,
       94,   32,   32,   35,   35,   36,   37,   77,   35,   76,
       36, 1240,    5,    6,    6,    6,    6,    6,    6,   38,
       76,    6,    6,   76,   38,    6,    6,   32,   32, 1235,

       35,   36,   37,   77,   35,   76,   36,   48,   48, 1231,
       97,   48,   48,   97,  102,   48,   76,  102, 1222,   76,
       38,    6,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   11,   11,   11,   11, 1220, 1217,
       40,   40,   41,   41,   78,   40,   80,   11,   11,   40,
       11,   11,   11,   81,   78,   83,   11,   40,   11,   11,
       11,   79,   79,   11,   11,   11,   11,   40, 1211,   41,
       78,   40,   80, 1208,   11,   40,   11,   11,   11,   81,

       78,   83,   11,   40,   11,   11,   11,   79,   79,   11,
       11,   11,   11,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   19,
       19,   19,   19,   42, 1198,   19,   84,  104,  124,   19,
       42,  124,   19,   19,  107,   19,   19,   19,   19,  108,

      109,   19, 1196,   19,   19,   19,   19, 1194,   19,   19,
       19,   19,   84,  104,   19,   45,   45,   45,   45,   19,
      107,   19,   19,   19,   19,  108,  109,   19,   45,   19,
       19,   19,   19,   39,   19,   19,   19,   19,   39,  110,
       19,   42, 1192,   19,   46,   46,   46,   46,   39, 1188,
     1182,  111,   39,   39, 1179, 1172,  114,   46,   47,   47,
       47,   47,   82, 1169,   39,  110,   82,   51,   51,   51,
       51,   47, 1166,   92,   39,   92,   92,  111,   39,   39,
       51,   55,  114,   92,   55,  516, 1165,  516,   82,   86,
       63,   55,   82,   86,   63,   64,  106,   55,   55,   55,

      106,   63,  115,   55,   63,   55,   64,   55,  118,   64,
       55,   55,   55,   55, 1163,   86,   63,   64, 1161,   86,
       63,   64,  106,   55,   55,   55,  106,   63,  115,   55,
       63,   55,   64,   55,  118,   64,   55,   55,   55,   55,
       61,   61, 1160,   64,   61,   61,   61,   61,   61,   61,
       61,   65,   61,   61, 1156,   66,   67,   68,  113,   66,
       67,  105,   65,  113,   65,   65,   66,   67,   68,   66,
       67,   68,  105,   68,  112,  105,  170,   65,  112,   61,
       61,   66,   67,   68,  113,   66,   67,  105,   65,  113,
       65,   65,   66,   67,   68,   66,   67,   68,  105,   68,

      112,  105,  170, 1153,  112,   61,   62,   62, 1148, 1145,
       62,   62,   62,   62,   62,   62,   62,   71,   62,   62,
       95,   62,   69,   95,   85,   71,   69,   95,   71,  116,
      129,   71,   62,   69,   85,   62,   69,  129,   85,   85,
      146, 1144, 1141,   71,  116,   62,   62,   62,   69,  146,
       85,   71,   69,  128,   71,  116,  128,   71,   62,   69,
       85,   62,   69,  129,   85,   85,   87,   87,   87,   87,
      116,   62,   70,  122,  122,  146,   70,  122,  122,   87,
       95,  122,  128,   70,  150,  130,   70,   88,   88,   88,
       88,   70,   90,   90,   90,   90,  168, 1139,   70,  168,

       88,  150,   70,  117,  130,   90,  171,  117,  527,   70,
      527,  117,   70,  100,  100,  100,  100,   70,   73,  117,
     1138,   73,  123,  123,  123,  123,  100,  150,  134,  117,
      130, 1128,  171,  117,   73,   73,   73,  117,  131,  131,
       73,  528,   73,  528,   73,  117,  134,   73,   73,   73,
       73,  120,  120,  120,  120, 1120,  121,  121,  121,  121,
       73,   73,   73,  132,  120,  131,   73,  132,   73,  121,
       73,  133,  134,   73,   73,   73,   73,  133,  135,  132,
      136,  136,  137,  138,  138,  140,  139,  145,  141,  133,
     1117, 1114,  142,  132,  135,  143,  148,  137,  144,  148,

      145, 1113,  141,  133,  139,  132,  141,  136, 1111,  140,
      138,  142,  147,  149,  143,  133,  147,  144, 1109,  149,
      135,  153,  154,  137,  147,  148,  145,  152,  141,  152,
      139,  147,  141,  153,  151,  140,  151,  142, 1105,  155,
      143,  154,  147,  144,  155,  149,  156,  151, 1103, 1102,
      147,  160,  160,  160,  160,  152,  172,  147,  169,  153,
      163,  163,  151,  156,  163,  163,  173,  154,  163,  169,
      155,  174,  169,  151,  162,  162,  162,  162,  164,  164,
      164,  164,  172,  175,  169,  176,  177,  162,  178,  156,
      179,  164,  173,  179,  181,  169,  197,  174,  169,  182,

      198,  177,  199,  200,  183,  181,  202,  203,  181,  175,
      182,  176,  177,  182,  178,  183, 1090,  182,  183,  206,
      181,  233,  197,  233,  233,  182,  198,  177,  199,  200,
      183,  181,  202,  203,  181,  184,  182,  185, 1083,  182,
      207,  183,  186,  182,  183,  206,  184,  204,  185,  184,
      184,  185, 1077,  186,  185,  529,  186,  529, 1065, 1062,
      201,  184,  204,  185,  201,  208,  207,  187,  186,  531,
     1059,  531,  184,  204,  185,  184,  184,  185,  187,  186,
      185,  187,  186,  188,  187,  189,  201,  190,  204,  210,
      201,  208,  211,  187,  188,  190,  189,  188,  190,  189,

      538,  190,  538,  189,  187,  191,  188,  187,  191,  188,
      187,  189,  212,  190,  650,  210,  191,  650,  211,  191,
      188,  190,  189,  188,  190,  189,  192,  190,  192,  189,
      213,  191,  188,  194,  191,  196,  209,  192,  212,  205,
      192, 1057,  191,  205,  194,  191,  196,  194,  209,  196,
      214,  194,  192,  545,  192,  545,  213,  215,  216,  194,
      217,  196,  209,  192,  218,  205,  192,  193,  193,  205,
      194,  219,  196,  194,  209,  196,  214,  194,  193,  193,
      220,  193,  221,  215,  216,  222,  217,  223,  220,  224,
      218,  225,  226,  193,  193, 1055, 1052,  219,  237,  232,

      224,  232,  232, 1051,  193,  193,  220,  193,  221,  232,
      238,  222, 1046,  223,  220,  224,  239,  225,  226,  227,
      227,  227,  227,  240,  237,  241,  224,  230,  230,  230,
      230,  234,  227,  242,  234,  240,  238,  241,  234,  243,
      230,  244,  239,  245,  246,  247,  248,  249,  250,  240,
      251,  241,  252,  254,  256,  255,  257,  258,  259,  242,
      253,  240,  260,  241, 1043,  243,  255,  244,  253,  245,
      246,  247,  248,  249,  250,  253,  251,  263,  252,  254,
      256,  255,  257,  258,  259,  263,  253,  264,  260,  268,
      266,  234,  255,  269,  253,  261,  261,  261,  261,  265,

      267,  253,  269,  270,  265,  267,  270,  264,  266,  271,
      272,  263,  271,  268,  273,  275,  274,  276,  272,  277,
      717,  279,  275,  717,  282,  284,  278,  273,  269,  282,
      265,  267,  270,  264,  266,  274,  276,  278,  271,  268,
      279,  277,  280,  281,  272,  283,  284,  283,  275,  285,
      280,  281,  288,  273,  287,  282,  286,  286,  285,  289,
      290,  274,  276,  278,  291,  294,  279,  277,  292,  303,
      294,  288,  284,  283,  287,  290,  280,  281,  289,  293,
      295,  292,  291,  286,  285,  296, 1042,  304,  297,  305,
      296,  293,  295,  306,  307,  303,  294,  288,  308,  309,

      287,  290,  297,  310,  289,  311,  312,  292,  291,  301,
      301,  301,  301,  304,  312,  305,  296,  293,  295,  306,
      307,  313,  314,  315,  308,  309, 1038,  332,  297,  310,
      316,  311,  312,  314,  316, 1035,  636,  333,  636,  760,
      312,  316,  760,  318,  316, 1031,  334,  313,  314,  315,
      319,  317,  319,  332,  318,  335,  316,  318, 1026,  314,
      316,  319,  317,  333,  319,  317,  318,  316,  317,  318,
      316,  321,  334,  336,  331,  337,  319,  317,  319,  338,
      318,  335,  321,  318,  320,  321,  331,  319,  317,  321,
      319,  317,  318,  322,  317,  320,  320,  321,  320,  336,

      331,  337,  323,  339,  322,  338,  324,  322,  321,  323,
      320,  321,  331,  323,  322,  321,  323,  324, 1021,  322,
      324,  320,  320,  325,  320,  340,  324,  326,  323,  339,
      322,  325,  324,  322,  325,  323,  327,  325,  326,  323,
      322,  326,  323,  324,  328, 1014,  324,  327,  341,  325,
      327,  340,  324,  326,  327,  328,  772,  325,  328,  772,
      325,  328,  327,  325,  326,  342,  343,  326,  344,  345,
      328,  329,  346,  327,  341,  330,  327,  347,  348,  349,
      327,  328,  329,  329,  328,  329,  330,  328,  350,  330,
      351,  342,  343,  352,  344,  345,  353,  329,  346,  354,

      355,  330,  356,  347,  348,  349,  357,  360,  329,  329,
      361,  329,  330,  362,  350,  330,  351,  363,  364,  352,
      365,  366,  353,  367,  368,  354,  355,  369,  356,  370,
      371,  372,  357,  360,  373,  374,  361,  375,  376,  362,
      377,  378,  379,  363,  364,  380,  365,  366,  381,  367,
      368,  382,  383,  369,  384,  370,  371,  372,  385,  386,
      373,  374,  387,  375,  376,  388,  377,  378,  379,  391,
      398,  380,  390,  395,  381,  393,  392,  382,  383,  397,
      384,  396,  391,  392,  385,  386,  395,  390,  387,  400,
      398,  388,  401,  393,  402,  396,  397,  399,  399,  402,

      403,  403,  404,  408,  413,  400,  401, 1012,  391,  392,
      410,  775,  395,  390,  775,  410,  398,  404,  408,  393,
      412,  396,  397,  413,  399,  402,  415,  403,  411,  411,
      414,  400,  401,  418,  417,  415,  985,  412,  418,  419,
      419,  410,  425,  404,  408,  420,  421,  414,  417,  413,
      420,  422,  426,  424,  427,  411,  422,  428,  429,  430,
      431,  415,  424,  412,  418,  421,  419,  432,  425,  433,
      434,  435,  436,  414,  417,  437,  420,  438,  426,  439,
      427,  980,  422,  428,  429,  430,  431,  979,  424,  455,
      647,  421,  647,  432,  978,  433,  434,  435,  436,  441,

      440,  437,  456,  438,  457,  439,  440,  442,  458,  444,
      441,  440,  976,  441,  440,  455,  441,  975,  442,  442,
      444,  442,  974,  444,  444,  441,  440,  443,  456,  459,
      457,  460,  440,  442,  458,  444,  441,  440,  443,  441,
      440,  443,  441,  443,  442,  442,  444,  442,  445,  444,
      444,  462,  446,  443,  447,  459,  463,  460,  665,  445,
      665,  448,  445,  446,  443,  447,  446,  443,  447,  443,
      449,  973,  448,  464,  445,  448,  465,  462,  446,  450,
      447,  449,  463,  972,  449,  445,  449,  448,  445,  446,
      450,  447,  446,  450,  447,  451,  449,  450,  448,  464,

      452,  448,  465,  451,  452,  450,  451,  449,  970,  451,
      449,  452,  449,  453,  452,  466,  450,  467,  468,  450,
      471,  451,  968,  450,  453,  472,  452,  453,  473,  451,
      452,  474,  451,  475,  454,  451,  477,  452,  454,  453,
      452,  466,  478,  467,  468,  454,  471,  479,  454,  480,
      453,  472,  481,  453,  473,  482,  483,  474,  484,  475,
      454,  486,  477,  487,  454,  488,  489,  490,  478,  491,
      492,  454,  493,  479,  454,  480,  496,  498,  481,  499,
      500,  482,  483,  501,  484,  502,  503,  486,  504,  487,
      505,  488,  489,  490,  506,  491,  492,  507,  493,  508,

      510,  512,  496,  498,  514,  499,  500,  793,  513,  501,
      793,  502,  503,  513,  504,  515,  505,  517,  512,  514,
      506,  518,  517,  507,  519,  508,  510,  523,  515,  520,
      518,  521,  525,  519,  515,  526,  530,  536,  522,  513,
      530,  532,  523,  533,  512,  514,  525,  520,  517,  521,
      522,  536,  526,  967,  515,  543,  518,  546,  532,  519,
      515,  547,  533,  548,  534,  535,  530,  537,  523,  534,
      535,  546,  525,  520,  539,  521,  522,  536,  526,  543,
      540,  539,  537,  540,  532,  541,  549,  547,  533,  548,
      550,  551,  552,  553,  554,  534,  535,  546,  555,  556,

      557,  558,  541,  559,  560,  543,  561,  539,  537,  540,
      959,  579,  549,  580,  581,  584,  550,  551,  552,  553,
      554,  958,  562,  585,  555,  556,  557,  558,  541,  559,
      560,  564,  561,  562,  582,  564,  562,  579,  955,  580,
      581,  584,  564,  812,  586,  564,  812,  582,  562,  585,
      667,  587,  667,  582,  757,  589,  757,  564,  565,  562,
      590,  564,  562,  563,  563,  779,  565,  779,  564,  565,
      586,  564,  565,  582,  566,  563,  563,  587,  563,  582,
      567,  589,  563,  593,  565,  566,  590,  952,  566,  594,
      563,  567,  565,  567,  567,  565,  568,  788,  565,  788,

      566,  563,  563,  951,  563,  595,  567,  568,  563,  593,
      568,  566,  568,  569,  566,  594,  569,  567,  596,  567,
      567,  571,  568,  570,  569,  571,  896,  569,  896,  573,
      940,  595,  571,  568,  570,  571,  568,  570,  568,  569,
      573,  570,  569,  573,  596,  597,  599,  571,  572,  570,
      569,  571,  572,  569,  574,  573,  574,  600,  571,  572,
      570,  571,  572,  570,  938,  574,  573,  570,  574,  573,
      575,  597,  599,  601,  572,  576,  576,  602,  572,  604,
      574,  575,  574,  600,  575,  572,  575,  576,  572,  605,
      576,  574,  608,  609,  574,  606,  575,  610,  611,  601,

      612,  613,  576,  602,  614,  604,  615,  575,  606,  618,
      575,  620,  575,  576,  606,  605,  576,  621,  608,  609,
      622,  623,  624,  610,  611,  625,  612,  613,  626,  627,
      614,  629,  615,  632,  606,  618,  634,  620,  649,  635,
      606,  638,  649,  621,  637,  640,  622,  623,  624,  637,
      634,  625,  641,  642,  626,  627,  635,  629,  638,  632,
      639,  639,  643,  639,  640,  644,  646,  645,  649,  642,
      648,  641,  645,  648,  644,  637,  634,  937,  652,  652,
      643,  652,  635,  935,  638,  646,  651,  651,  651,  651,
      640,  654,  654,  654,  654,  642,  655,  641,  645,  648,

      644,  655,  656,  659,  660,  657,  643,  656,  657,  658,
      663,  646,  664,  658,  661,  661,  661,  661,  660,  666,
      670,  659,  668,  668,  668,  668,  672,  655,  673,  663,
      669,  674,  671,  656,  657,  666,  664,  669,  675,  658,
      676,  677,  678,  679,  660,  671,  670,  659,  680,  681,
      682,  671,  672,  683,  673,  663,  899,  674,  899,  704,
      933,  666,  664,  669,  675,  706,  676,  677,  678,  679,
      685,  671,  924,  922,  680,  681,  682,  671,  687,  683,
      707,  685,  687,  688,  685,  704,  685,  689,  921,  687,
      708,  706,  687,  919,  688,  710,  685,  688,  689,  688,

      711,  689,  694,  694,  687,  689,  707,  685,  687,  688,
      685,  918,  685,  689,  694,  687,  708,  694,  687,  690,
      688,  710,  908,  688,  689,  688,  711,  689,  691,  694,
      690,  689,  691,  690,  690,  692,  900,  692,  712,  691,
      694,  693,  691,  694,  693,  690,  692,  709,  709,  692,
      709,  713,  693,  893,  691,  693,  690,  892,  691,  690,
      690,  692,  695,  692,  712,  691,  695,  693,  691,  696,
      693,  696,  692,  695,  891,  692,  695,  713,  693,  697,
      696,  693,  697,  696,  882,  715,  716,  698,  695,  720,
      697,  721,  695,  697,  880,  696,  699,  696,  698,  695,

      698,  698,  695,  878,  722,  697,  696,  699,  697,  696,
      699,  715,  716,  698,  699,  720,  697,  721,  700,  697,
      718,  718,  699,  718,  698,  723,  698,  698,  726,  700,
      722,  727,  700,  699,  728,  729,  699,  730,  732,  733,
      699,  700,  735,  736,  700,  724,  724,  724,  724,  734,
      734,  723,  734,  737,  726,  700,  738,  727,  700,  739,
      728,  729,  740,  730,  732,  733,  741,  700,  735,  736,
      742,  743,  743,  745,  743,  746,  747,  748,  749,  737,
      750,  751,  738,  752,  754,  739,  756,  876,  740,  758,
      762,  759,  741,  771,  761,  762,  742,  765,  771,  745,

      759,  746,  747,  748,  749,  765,  750,  751,  758,  752,
      754,  766,  756,  761,  763,  763,  767,  763,  768,  769,
      766,  762,  770,  773,  771,  875,  759,  768,  773,  777,
      777,  765,  777,  783,  758,  767,  789,  769,  796,  761,
      770,  776,  776,  776,  776,  789,  766,  780,  780,  780,
      780,  781,  783,  768,  773,  781,  787,  787,  787,  787,
      792,  767,  797,  769,  796,  792,  770,  791,  791,  791,
      791,  789,  794,  794,  794,  794,  798,  799,  783,  800,
      801,  781,  802,  803,  805,  806,  807,  808,  797,  809,
      810,  792,  827,  811,  874,  827,  828,  828,  872,  828,

      830,  811,  798,  799,  811,  800,  801,  811,  802,  803,
      805,  806,  807,  808,  813,  809,  810,  832,  833,  811,
      814,  834,  870,  868,  814,  813,  830,  811,  813,  837,
      811,  814,  813,  811,  814,  838,  829,  829,  815,  829,
      813,  854,  839,  832,  833,  815,  814,  834,  816,  815,
      814,  813,  815,  852,  813,  837,  817,  814,  813,  816,
      814,  838,  816,  840,  815,  818,  816,  817,  839,  818,
      817,  815,  850,  817,  816,  815,  818,  849,  815,  818,
      835,  835,  817,  835,  842,  816,  819,  819,  816,  840,
      847,  818,  816,  817,  841,  818,  817,  841,  819,  817,

      846,  819,  818,  821,  821,  818,  844,  843,  822,  844,
      842,  845,  845,  819,  845,  821,  823,  823,  821,  822,
      824,  824,  822,  848,  819,  825,  822,  819,  823,  836,
      821,  823,  824,  825,  822,  824,  825,  853,  855,  825,
      856,  821,  857,  823,  821,  822,  831,  824,  822,  848,
      858,  825,  822,  859,  823,  826,  826,  823,  824,  825,
      861,  824,  825,  853,  855,  825,  856,  826,  857,  862,
      826,  851,  851,  851,  851,  863,  858,  860,  860,  859,
      860,  864,  826,  865,  866,  867,  861,  869,  869,  871,
      869,  873,  877,  826,  879,  862,  826,  881,  883,  884,

      881,  863,  884,  883,  885,  889,  887,  864,  886,  865,
      866,  867,  885,  886,  889,  871,  888,  873,  877,  890,
      879,  887,  894,  895,  897,  894,  901,  897,  901,  883,
      898,  888,  820,  902,  890,  902,  895,  905,  885,  886,
      889,  903,  898,  903,  906,  911,  906,  887,  904,  904,
      904,  904,  905,  907,  907,  907,  907,  888,  909,  912,
      890,  909,  895,  910,  913,  910,  914,  915,  898,  916,
      917,  911,  920,  923,  926,  925,  944,  926,  905,  925,
      927,  934,  804,  946,  934,  912,  925,  927,  795,  925,
      913,  927,  914,  915,  927,  916,  917,  790,  920,  923,

      928,  925,  944,  947,  928,  925,  927,  929,  930,  946,
      786,  928,  925,  927,  928,  925,  930,  927,  929,  930,
      927,  929,  930,  931,  931,  939,  928,  785,  784,  947,
      928,  936,  936,  929,  930,  931,  939,  928,  931,  939,
      928,  932,  930,  936,  929,  930,  936,  929,  930,  782,
      931,  939,  932,  932,  941,  932,  945,  941,  936,  945,
      948,  931,  939,  949,  931,  939,  950,  932,  954,  936,
      942,  942,  936,  942,  943,  943,  957,  943,  932,  932,
      953,  932,  960,  953,  961,  962,  948,  963,  964,  949,
      965,  966,  950,  969,  954,  956,  956,  956,  956,  971,

      977,  981,  957,  982,  981,  982,  983,  984,  960,  994,
      961,  962,  994,  963,  964,  987,  965,  966,  988,  969,
      989,  778,  984,  986,  983,  971,  977,  986,  990,  987,
      990, 1007,  996,  988,  989,  991,  992,  991,  992,  993,
      995,  996,  997,  995,  993,  997,  774,  998,  984,  998,
      983,  999, 1003,  986,  999,  987, 1005, 1007, 1005,  988,
      989, 1000, 1000, 1000, 1000, 1001, 1003,  996, 1001, 1008,
      993, 1002, 1002, 1002, 1002, 1004, 1009, 1010, 1004, 1006,
     1006, 1006, 1006, 1011, 1013, 1015, 1017, 1016, 1023, 1033,
      764, 1023, 1003, 1018, 1018, 1008, 1024, 1017, 1016, 1024,

     1017, 1016, 1009, 1010, 1016, 1018,  755, 1020, 1018, 1011,
     1013, 1015, 1017, 1016, 1019, 1033, 1025, 1019, 1020, 1025,
     1018, 1020,  753, 1017, 1016, 1019, 1017, 1016, 1019, 1027,
     1016, 1018, 1027, 1020, 1018, 1022, 1034, 1036, 1028, 1022,
     1019, 1028, 1029, 1019, 1020, 1030, 1022, 1020, 1030, 1022,
     1037, 1019, 1039, 1029, 1019, 1029, 1029, 1032,  744,  731,
     1032, 1022, 1034, 1036, 1041, 1022, 1044, 1045, 1029, 1047,
     1048, 1049, 1022, 1050, 1053, 1022, 1037, 1054, 1039, 1029,
     1056, 1029, 1029, 1040, 1040, 1040, 1040, 1061, 1058, 1061,
     1041, 1058, 1044, 1045, 1060, 1047, 1048, 1049, 1060, 1050,

     1053, 1063, 1064, 1054, 1069,  725, 1056, 1066, 1066, 1066,
     1066, 1070, 1071, 1063, 1070, 1081, 1064, 1067, 1067, 1067,
     1067,  719,  714, 1069, 1060, 1068, 1068, 1068, 1068, 1072,
     1071, 1073, 1072, 1074, 1073, 1076, 1074, 1078, 1076, 1063,
     1078, 1081, 1064, 1075, 1075, 1075, 1075, 1079, 1079, 1069,
     1079, 1080, 1080, 1080, 1080, 1082, 1071, 1084, 1085, 1086,
     1087, 1088, 1088, 1089,  705, 1104, 1089, 1091, 1091, 1093,
     1093, 1093, 1093, 1088, 1089, 1095, 1088, 1089, 1095, 1091,
      703, 1082, 1091, 1084, 1085, 1086, 1087, 1096, 1088, 1089,
     1096, 1104, 1089, 1092, 1091, 1106,  702,  701, 1094, 1088,

     1089,  686, 1088, 1089, 1092, 1091, 1092, 1092, 1091, 1094,
     1097, 1098, 1094, 1097, 1098, 1099, 1094, 1101, 1099, 1092,
     1101, 1106, 1100, 1100, 1094, 1107, 1107, 1107, 1107, 1108,
     1092, 1112, 1092, 1092, 1100, 1094, 1115, 1100, 1094, 1116,
     1110, 1110, 1094, 1110, 1118, 1119, 1124, 1121, 1121, 1100,
     1121, 1122,  684,  662, 1122, 1108, 1123, 1112, 1123, 1126,
     1100, 1126, 1115, 1100, 1124, 1116, 1125, 1127,  653, 1125,
     1118, 1119, 1129, 1134, 1129,  633, 1127, 1130, 1130, 1130,
     1130, 1131, 1131, 1131, 1131, 1132, 1132, 1132, 1132, 1133,
     1124, 1135, 1134, 1136, 1135, 1136, 1140, 1133, 1137, 1137,

     1142, 1137, 1127, 1143, 1147, 1149, 1149, 1147, 1155,  631,
     1146, 1150, 1150, 1150, 1150, 1158, 1152, 1149, 1134, 1152,
     1149, 1146, 1140, 1133, 1146, 1162, 1142, 1146, 1151, 1143,
     1154, 1154, 1149, 1154, 1155, 1151, 1146, 1159, 1159, 1151,
     1159, 1158, 1151, 1149, 1164, 1167, 1149, 1146, 1168, 1171,
     1146, 1162, 1171, 1146, 1151, 1157, 1157, 1157, 1157, 1170,
     1170, 1151, 1170, 1173, 1174, 1151, 1173, 1174, 1151, 1175,
     1164, 1167, 1181, 1176, 1168, 1176, 1177, 1177, 1177, 1177,
     1178, 1180, 1183, 1184, 1180, 1189, 1184, 1175, 1185, 1185,
     1186, 1187, 1193, 1186, 1187, 1178, 1189, 1195, 1181, 1189,

     1185, 1190, 1197, 1185, 1190, 1202, 1191, 1191, 1183, 1191,
     1200, 1189, 1200, 1175, 1199, 1185, 1201, 1199, 1193, 1201,
     1209, 1178, 1189, 1195, 1202, 1189, 1185,  630, 1197, 1185,
     1203, 1203, 1203, 1203, 1204, 1204, 1204, 1204, 1205, 1206,
     1207, 1206, 1205, 1207, 1210, 1212, 1209, 1210, 1212, 1216,
     1202, 1213, 1213, 1213, 1213, 1214, 1215, 1218, 1214, 1215,
     1219, 1221, 1221, 1221, 1221, 1226, 1214, 1224, 1205, 1214,
     1223, 1223, 1223, 1223, 1230, 1216, 1225, 1225, 1225, 1225,
     1232, 1214, 1237, 1218, 1214, 1224, 1219, 1227, 1227, 1227,
     1227, 1226, 1214, 1229,  628, 1214, 1228, 1228, 1228, 1228,

     1230, 1234,  619, 1234, 1229,  617, 1232, 1229, 1237,  616,
     1229, 1224, 1233, 1233, 1233, 1233, 1239, 1239,  607, 1229,
     1236, 1236, 1236, 1236, 1238, 1238, 1238, 1238, 1239,  603,
     1229, 1239, 1244, 1229, 1244,  598, 1229, 1243, 1243, 1243,
     1243,  592,  591, 1239, 1248, 1248, 1248, 1248, 1249, 1249,
     1249, 1249,  588,  583, 1239,  578,  577, 1239, 1250, 1250,
     1250, 1250, 1251, 1251, 1251, 1251, 1252, 1252, 1252, 1252,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1255,
     1255, 1256,  544,  542, 1256, 1256, 1256,  524, 1256, 1257,
     1257,  509, 1257,  497, 1257,  495, 1257, 1257, 1258, 1258,

      494, 1258,  485, 1258,  476, 1258, 1258, 1259, 1259, 1259,
      470, 1259, 1259, 1259, 1259, 1259, 1260,  469, 1260, 1261,
      461,  423, 1261,  416, 1261,  409, 1261, 1261,  407,  406,
      405,  394,  262,  235,  231,  228,  180,  165,  159,  158,
      157,  127,  126,  119,  103,  101,   89,   59,   49,   43,
       27,   25,   23,   17, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,

     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253, 1253,
     1253
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[106] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 
    1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 
    1, 1, 1, 1, 1, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int scdoc_flex_debug;
int scdoc_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *scdoctext;
#line 1 "SCDoc.l"
#line 2 "SCDoc.l"
/************************************************************************
*
* Copyright 2012 Jonatan Liljedahl <lijon@kymatica.com>
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
************************************************************************/

#include <string.h>
#include "SCDoc.h"
#include "SCDoc.tab.hpp"

int scdoc_start_token = 0;
//int colnum;
//#define YY_USER_ACTION { scdoclloc.first_column = colnum; colnum=colnum+scdocleng; scdoclloc.last_column=colnum; if(scdoclloc.first_line!=scdoclineno) colnum=1; scdoclloc.first_line = scdoclloc.last_line = scdoclineno;}

static int method_caller;

#define YY_NO_UNISTD_H 1







#line 1845 "lex.scdoc.cpp"

#define INITIAL 0
#define verbatim 1
#define verbatim2 2
#define metadata 3
#define eat 4
#define eat2 5
#define eat3 6
#define method 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int scdoclex_destroy (void );

int scdocget_debug (void );

void scdocset_debug (int debug_flag  );

YY_EXTRA_TYPE scdocget_extra (void );

void scdocset_extra (YY_EXTRA_TYPE user_defined  );

FILE *scdocget_in (void );

void scdocset_in  (FILE * in_str  );

FILE *scdocget_out (void );

void scdocset_out  (FILE * out_str  );

int scdocget_leng (void );

char *scdocget_text (void );

int scdocget_lineno (void );

void scdocset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int scdocwrap (void );
#else
extern int scdocwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( scdoctext, scdocleng, 1, scdocout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( scdocin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( scdocin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, scdocin))==0 && ferror(scdocin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(scdocin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int scdoclex (void);

#define YY_DECL int scdoclex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after scdoctext and scdocleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 45 "SCDoc.l"




if (scdoc_start_token) {
    int t = scdoc_start_token;
    scdoc_start_token = 0;
//    colnum = 1;
    if(t==START_METADATA) BEGIN(eat);
    return t;
}



#line 2054 "lex.scdoc.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! scdocin )
			scdocin = stdin;

		if ( ! scdocout )
			scdocout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			scdocensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				scdoc_create_buffer(scdocin,YY_BUF_SIZE );
		}

		scdoc_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of scdoctext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1254 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1253 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < scdocleng; ++yyl )
				if ( scdoctext[yyl] == '\n' )
					   
    scdoclineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "SCDoc.l"
return CLASS;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "SCDoc.l"
return TITLE;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "SCDoc.l"
return SUMMARY;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "SCDoc.l"
return RELATED;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "SCDoc.l"
return CATEGORIES;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 64 "SCDoc.l"
return REDIRECT;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 66 "SCDoc.l"
return CLASSTREE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 67 "SCDoc.l"
return KEYWORD;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "SCDoc.l"
return PRIVATE;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "SCDoc.l"
return SECTION;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "SCDoc.l"
return SUBSECTION;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "SCDoc.l"
return COPYMETHOD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "SCDoc.l"
method_caller = YY_START; BEGIN(method); return METHOD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "SCDoc.l"
return ARGUMENT;
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 76 "SCDoc.l"
return DESCRIPTION;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 77 "SCDoc.l"
return CLASSMETHODS;
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 78 "SCDoc.l"
return INSTANCEMETHODS;
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 79 "SCDoc.l"
return EXAMPLES;
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 81 "SCDoc.l"
return RETURNS;
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 82 "SCDoc.l"
return DISCUSSION;
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 84 "SCDoc.l"
return LIST;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 85 "SCDoc.l"
return TREE;
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 86 "SCDoc.l"
return NUMBEREDLIST;
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 87 "SCDoc.l"
return DEFINITIONLIST;
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 88 "SCDoc.l"
return TABLE;
	YY_BREAK
case 26:
/* rule 26 can match eol */
YY_RULE_SETUP
#line 89 "SCDoc.l"
return FOOTNOTE;
	YY_BREAK
case 27:
/* rule 27 can match eol */
YY_RULE_SETUP
#line 90 "SCDoc.l"
return WARNING;
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 91 "SCDoc.l"
return NOTE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 93 "SCDoc.l"
BEGIN(verbatim); return LINK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 94 "SCDoc.l"
BEGIN(verbatim); return ANCHOR;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 95 "SCDoc.l"
BEGIN(verbatim); return IMAGE;
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 96 "SCDoc.l"
BEGIN(verbatim); return SOFT;
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 97 "SCDoc.l"
BEGIN(verbatim); return STRONG;
	YY_BREAK
case 34:
/* rule 34 can match eol */
YY_RULE_SETUP
#line 98 "SCDoc.l"
BEGIN(verbatim); return EMPHASIS;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 99 "SCDoc.l"
BEGIN(verbatim); return CODE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 100 "SCDoc.l"
BEGIN(verbatim); return TELETYPE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 101 "SCDoc.l"
BEGIN(verbatim); return MATH;
	YY_BREAK
case 38:
/* rule 38 can match eol */
YY_RULE_SETUP
#line 103 "SCDoc.l"
BEGIN(verbatim2); return CODEBLOCK;
	YY_BREAK
case 39:
/* rule 39 can match eol */
YY_RULE_SETUP
#line 104 "SCDoc.l"
BEGIN(verbatim2); return TELETYPEBLOCK;
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 105 "SCDoc.l"
BEGIN(verbatim2); return MATHBLOCK;
	YY_BREAK
case 41:
/* rule 41 can match eol */
YY_RULE_SETUP
#line 107 "SCDoc.l"
BEGIN(0); return TAGSYM;
	YY_BREAK
case 42:
/* rule 42 can match eol */
YY_RULE_SETUP
#line 108 "SCDoc.l"
BEGIN(0); return TAGSYM;
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 109 "SCDoc.l"
return BARS;
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 110 "SCDoc.l"
return HASHES;
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 112 "SCDoc.l"
scdoclval.str = strdup("\n"); return TEXT;
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 113 "SCDoc.l"
scdoclval.str = strdup(" "); return TEXT;
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 114 "SCDoc.l"
return NEWLINE;
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 115 "SCDoc.l"
return EMPTYLINES;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 117 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return COMMA;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 119 "SCDoc.l"
scdoclval.str = strdup("||"); return TEXT;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 120 "SCDoc.l"
scdoclval.str = strdup("##"); return TEXT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 121 "SCDoc.l"
scdoclval.str = strdup("::"); return TEXT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 122 "SCDoc.l"
scdoclval.str = strdup("    "); return TEXT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 123 "SCDoc.l"
scdoclval.str = strdup(" "); return TEXT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 125 "SCDoc.l"
/* eat this */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 127 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return URL;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 128 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return METHODNAME;
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 129 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return METHODARGS;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 130 "SCDoc.l"
/* eat this */
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 131 "SCDoc.l"
BEGIN(method_caller); return NEWLINE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 132 "SCDoc.l"
return BAD_METHODNAME;
	YY_BREAK
case 62:
#line 135 "SCDoc.l"
case 63:
#line 136 "SCDoc.l"
case 64:
#line 137 "SCDoc.l"
case 65:
#line 138 "SCDoc.l"
case 66:
YY_RULE_SETUP
#line 138 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return TEXT;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 140 "SCDoc.l"
BEGIN(metadata); return CLASS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 141 "SCDoc.l"
BEGIN(metadata); return TITLE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 142 "SCDoc.l"
BEGIN(metadata); return SUMMARY;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 143 "SCDoc.l"
BEGIN(metadata); return RELATED;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 144 "SCDoc.l"
BEGIN(metadata); return CATEGORIES;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 145 "SCDoc.l"
BEGIN(metadata); return REDIRECT;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 146 "SCDoc.l"
BEGIN(metadata); return CLASSTREE;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 147 "SCDoc.l"
BEGIN(metadata); return KEYWORD;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 148 "SCDoc.l"
BEGIN(metadata); return PRIVATE;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 149 "SCDoc.l"
BEGIN(metadata); return SECTION;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 150 "SCDoc.l"
BEGIN(metadata); return SUBSECTION;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 151 "SCDoc.l"
BEGIN(metadata); return COPYMETHOD;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 152 "SCDoc.l"
method_caller = YY_START; BEGIN(method); return METHOD;
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 153 "SCDoc.l"
BEGIN(eat); return DESCRIPTION;
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 154 "SCDoc.l"
BEGIN(eat); return CLASSMETHODS;
	YY_BREAK
case 82:
/* rule 82 can match eol */
YY_RULE_SETUP
#line 155 "SCDoc.l"
BEGIN(eat); return INSTANCEMETHODS;
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 156 "SCDoc.l"
BEGIN(eat); return EXAMPLES;
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
#line 157 "SCDoc.l"
BEGIN(eat); return NEWLINE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 158 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return COMMA;
	YY_BREAK
case 86:
#line 160 "SCDoc.l"
case 87:
#line 161 "SCDoc.l"
case 88:
#line 162 "SCDoc.l"
case 89:
YY_RULE_SETUP
#line 162 "SCDoc.l"
scdoclval.str = strdup(scdoctext); return TEXT;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 163 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 164 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 165 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 166 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 167 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 168 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 169 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 170 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 171 "SCDoc.l"
BEGIN(eat2);
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 172 "SCDoc.l"
BEGIN(eat3);
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 173 "SCDoc.l"
BEGIN(eat3);
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 174 "SCDoc.l"
BEGIN(eat3);
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 175 "SCDoc.l"
BEGIN(eat);
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 176 "SCDoc.l"
BEGIN(eat);
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 177 "SCDoc.l"
/* empty */
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 178 "SCDoc.l"
ECHO;
	YY_BREAK
#line 2691 "lex.scdoc.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(verbatim):
case YY_STATE_EOF(verbatim2):
case YY_STATE_EOF(metadata):
case YY_STATE_EOF(eat):
case YY_STATE_EOF(eat2):
case YY_STATE_EOF(eat3):
case YY_STATE_EOF(method):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed scdocin at a new source and called
			 * scdoclex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = scdocin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( scdocwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * scdoctext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of scdoclex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					scdocrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			scdocrestart(scdocin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) scdocrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1254 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1254 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1253);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up scdoctext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --scdoclineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					scdocrestart(scdocin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( scdocwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve scdoctext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    scdoclineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void scdocrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        scdocensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            scdoc_create_buffer(scdocin,YY_BUF_SIZE );
	}

	scdoc_init_buffer(YY_CURRENT_BUFFER,input_file );
	scdoc_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void scdoc_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		scdocpop_buffer_state();
	 *		scdocpush_buffer_state(new_buffer);
     */
	scdocensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	scdoc_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (scdocwrap()) processing, but the only time this flag
	 * is looked at is after scdocwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void scdoc_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	scdocin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE scdoc_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) scdocalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scdoc_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) scdocalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in scdoc_create_buffer()" );

	b->yy_is_our_buffer = 1;

	scdoc_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with scdoc_create_buffer()
 * 
 */
    void scdoc_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		scdocfree((void *) b->yy_ch_buf  );

	scdocfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a scdocrestart() or at EOF.
 */
    static void scdoc_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	scdoc_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then scdoc_init_buffer was _probably_
     * called from scdocrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void scdoc_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		scdoc_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void scdocpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	scdocensure_buffer_stack();

	/* This block is copied from scdoc_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from scdoc_switch_to_buffer. */
	scdoc_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void scdocpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	scdoc_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		scdoc_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void scdocensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)scdocalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scdocensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)scdocrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in scdocensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE scdoc_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) scdocalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in scdoc_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	scdoc_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to scdoclex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       scdoc_scan_bytes() instead.
 */
YY_BUFFER_STATE scdoc_scan_string (yyconst char * yystr )
{
    
	return scdoc_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to scdoclex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE scdoc_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) scdocalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in scdoc_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = scdoc_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in scdoc_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up scdoctext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		scdoctext[scdocleng] = (yy_hold_char); \
		(yy_c_buf_p) = scdoctext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		scdocleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int scdocget_lineno  (void)
{
        
    return scdoclineno;
}

/** Get the input stream.
 * 
 */
FILE *scdocget_in  (void)
{
        return scdocin;
}

/** Get the output stream.
 * 
 */
FILE *scdocget_out  (void)
{
        return scdocout;
}

/** Get the length of the current token.
 * 
 */
int scdocget_leng  (void)
{
        return scdocleng;
}

/** Get the current token.
 * 
 */

char *scdocget_text  (void)
{
        return scdoctext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void scdocset_lineno (int  line_number )
{
    
    scdoclineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see scdoc_switch_to_buffer
 */
void scdocset_in (FILE *  in_str )
{
        scdocin = in_str ;
}

void scdocset_out (FILE *  out_str )
{
        scdocout = out_str ;
}

int scdocget_debug  (void)
{
        return scdoc_flex_debug;
}

void scdocset_debug (int  bdebug )
{
        scdoc_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from scdoclex_destroy(), so don't allocate here.
     */

    /* We do not touch scdoclineno unless the option is enabled. */
    scdoclineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    scdocin = stdin;
    scdocout = stdout;
#else
    scdocin = (FILE *) 0;
    scdocout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * scdoclex_init()
     */
    return 0;
}

/* scdoclex_destroy is for both reentrant and non-reentrant scanners. */
int scdoclex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		scdoc_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		scdocpop_buffer_state();
	}

	/* Destroy the stack itself. */
	scdocfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * scdoclex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *scdocalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *scdocrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void scdocfree (void * ptr )
{
	free( (char *) ptr );	/* see scdocrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 178 "SCDoc.l"




